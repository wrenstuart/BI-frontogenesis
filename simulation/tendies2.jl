using Oceananigans.Biogeochemistry: biogeochemical_transition, biogeochemical_drift_velocity
using Oceananigans.TurbulenceClosures: ‚àÇ‚±º_œÑ‚ÇÅ‚±º, ‚àÇ‚±º_œÑ‚ÇÇ‚±º, ‚àÇ‚±º_œÑ‚ÇÉ‚±º, ‚àá_dot_q·∂ú
using Oceananigans.TurbulenceClosures: immersed_‚àÇ‚±º_œÑ‚ÇÅ‚±º, immersed_‚àÇ‚±º_œÑ‚ÇÇ‚±º, immersed_‚àÇ‚±º_œÑ‚ÇÉ‚±º, immersed_‚àá_dot_q·∂ú
using Oceananigans.Forcings: with_advective_forcing
using Oceananigans.Advection
using Oceananigans.Coriolis
using Oceananigans.Utils: SumOfArrays

"return the ``x``-gradient of hydrostatic pressure"
hydrostatic_pressure_gradient_x(i, j, k, grid, hydrostatic_pressure) = ‚àÇx·∂†·∂ú·∂ú(i, j, k, grid, hydrostatic_pressure)
hydrostatic_pressure_gradient_x(i, j, k, grid, ::Nothing) = zero(grid)

"return the ``y``-gradient of hydrostatic pressure"
hydrostatic_pressure_gradient_y(i, j, k, grid, hydrostatic_pressure) = ‚àÇy·∂ú·∂†·∂ú(i, j, k, grid, hydrostatic_pressure)
hydrostatic_pressure_gradient_y(i, j, k, grid, ::Nothing) = zero(grid)

array_to_function(arr) = (i, j, k) -> arr[i, j, k]
a2f(arr) = array_to_function(arr)

# Taking a function taking indices as inputs (rather than an array)
@inline fÃÖ·∂ú·µÉ·µÉ(f::Function) = (i, j, k) -> (f(i+1, j, k) + f(i, j, k))/2
@inline fÃÖ·∂†·µÉ·µÉ(f::Function) = (i, j, k) -> (f(i-1, j, k) + f(i, j, k))/2
@inline fÃÖ·µÉ·∂ú·µÉ(f::Function) = (i, j, k) -> (f(i, j+1, k) + f(i, j, k))/2
@inline fÃÖ·µÉ·∂†·µÉ(f::Function) = (i, j, k) -> (f(i, j-1, k) + f(i, j, k))/2
@inline fÃÖ·µÉ·µÉ·∂ú(f::Function) = (i, j, k) -> (f(i, j, k+1) + f(i, j, k))/2
@inline fÃÖ·µÉ·µÉ·∂†(f::Function) = (i, j, k) -> (f(i, j, k-1) + f(i, j, k))/2
@inline fÃÖ·∂ú·µÉ·µÉ(arr) = fÃÖ·∂ú·µÉ·µÉ(a2f(arr))
@inline fÃÖ·∂†·µÉ·µÉ(arr) = fÃÖ·∂†·µÉ·µÉ(a2f(arr))
@inline fÃÖ·µÉ·∂ú·µÉ(arr) = fÃÖ·µÉ·∂ú·µÉ(a2f(arr))
@inline fÃÖ·µÉ·∂†·µÉ(arr) = fÃÖ·µÉ·∂†·µÉ(a2f(arr))
@inline fÃÖ·µÉ·µÉ·∂ú(arr) = fÃÖ·µÉ·µÉ·∂ú(a2f(arr))
@inline fÃÖ·µÉ·µÉ·∂†(arr) = fÃÖ·µÉ·µÉ·∂†(a2f(arr))

@inline Œ¥x·∂ú·µÉ·µÉ(f::Function) = (i, j, k) ->  f(i+1, j, k) - f(i, j, k)
@inline Œ¥x·∂†·µÉ·µÉ(f::Function) = (i, j, k) -> -f(i-1, j, k) + f(i, j, k)
@inline Œ¥y·µÉ·∂ú·µÉ(f::Function) = (i, j, k) ->  f(i, j+1, k) - f(i, j, k)
@inline Œ¥y·µÉ·∂†·µÉ(f::Function) = (i, j, k) -> -f(i, j-1, k) + f(i, j, k)
@inline Œ¥z·µÉ·µÉ·∂ú(f::Function) = (i, j, k) ->  f(i, j, k+1) - f(i, j, k)
@inline Œ¥z·µÉ·µÉ·∂†(f::Function) = (i, j, k) -> -f(i, j, k-1) + f(i, j, k)
@inline Œ¥x·∂ú·µÉ·µÉ(arr::Array) = Œ¥x·∂ú·µÉ·µÉ(a2f(arr))
@inline Œ¥x·∂†·µÉ·µÉ(arr::Array) = Œ¥x·∂†·µÉ·µÉ(a2f(arr))
@inline Œ¥y·µÉ·∂ú·µÉ(arr::Array) = Œ¥y·µÉ·∂ú·µÉ(a2f(arr))
@inline Œ¥y·µÉ·∂†·µÉ(arr::Array) = Œ¥y·µÉ·∂†·µÉ(a2f(arr))
@inline Œ¥z·µÉ·µÉ·∂ú(arr::Array) = Œ¥z·µÉ·µÉ·∂ú(a2f(arr))
@inline Œ¥z·µÉ·µÉ·∂†(arr::Array) = Œ¥z·µÉ·µÉ·∂†(a2f(arr))

@inline fÃÖ·∂ú·∂ú·µÉ(f) = fÃÖ·∂ú·µÉ·µÉ(fÃÖ·µÉ·∂ú·µÉ(f))
@inline fÃÖ·∂ú·∂†·µÉ(f) = fÃÖ·∂ú·µÉ·µÉ(fÃÖ·µÉ·∂†·µÉ(f))
@inline fÃÖ·∂†·∂ú·µÉ(f) = fÃÖ·∂†·µÉ·µÉ(fÃÖ·µÉ·∂ú·µÉ(f))
@inline fÃÖ·∂†·∂†·µÉ(f) = fÃÖ·∂†·µÉ·µÉ(fÃÖ·µÉ·∂†·µÉ(f))
@inline fÃÖ·µÉ·∂ú·∂ú(f) = fÃÖ·µÉ·∂ú·µÉ(fÃÖ·µÉ·µÉ·∂ú(f))
@inline fÃÖ·µÉ·∂ú·∂†(f) = fÃÖ·µÉ·∂ú·µÉ(fÃÖ·µÉ·µÉ·∂†(f))
@inline fÃÖ·µÉ·∂†·∂ú(f) = fÃÖ·µÉ·∂†·µÉ(fÃÖ·µÉ·µÉ·∂ú(f))
@inline fÃÖ·µÉ·∂†·∂†(f) = fÃÖ·µÉ·∂†·µÉ(fÃÖ·µÉ·µÉ·∂†(f))
@inline fÃÖ·∂ú·µÉ·∂ú(f) = fÃÖ·∂ú·µÉ·µÉ(fÃÖ·µÉ·µÉ·∂ú(f))
@inline fÃÖ·∂ú·µÉ·∂†(f) = fÃÖ·∂ú·µÉ·µÉ(fÃÖ·µÉ·µÉ·∂†(f))
@inline fÃÖ·∂†·µÉ·∂ú(f) = fÃÖ·∂†·µÉ·µÉ(fÃÖ·µÉ·µÉ·∂ú(f))
@inline fÃÖ·∂†·µÉ·∂†(f) = fÃÖ·∂†·µÉ·µÉ(fÃÖ·µÉ·µÉ·∂†(f))

@inline fÃÖ‚òÖ·µÉ·µÉ(f) = fÃÖ·∂ú·µÉ·µÉ(fÃÖ·∂†·µÉ·µÉ(f))
@inline fÃÖ·µÉ‚òÖ·µÉ(f) = fÃÖ·µÉ·∂ú·µÉ(fÃÖ·µÉ·∂†·µÉ(f))
@inline fÃÖ·µÉ·µÉ‚òÖ(f) = fÃÖ·µÉ·µÉ·∂ú(fÃÖ·µÉ·µÉ·∂†(f))

@inline ‚àÇx·∂ú·∂ú·∂ú_f(grid, arr) = (i, j, k) -> ‚àÇx·∂ú·∂ú·∂ú(i, j, k, grid, arr)
@inline ‚àÇx·∂ú·∂ú·∂†_f(grid, arr) = (i, j, k) -> ‚àÇx·∂ú·∂ú·∂†(i, j, k, grid, arr)
@inline ‚àÇx·∂ú·∂†·∂ú_f(grid, arr) = (i, j, k) -> ‚àÇx·∂ú·∂†·∂ú(i, j, k, grid, arr)
@inline ‚àÇx·∂ú·∂†·∂†_f(grid, arr) = (i, j, k) -> ‚àÇx·∂ú·∂†·∂†(i, j, k, grid, arr)
@inline ‚àÇx·∂†·∂ú·∂ú_f(grid, arr) = (i, j, k) -> ‚àÇx·∂†·∂ú·∂ú(i, j, k, grid, arr)
@inline ‚àÇx·∂†·∂ú·∂†_f(grid, arr) = (i, j, k) -> ‚àÇx·∂†·∂ú·∂†(i, j, k, grid, arr)
@inline ‚àÇx·∂†·∂†·∂ú_f(grid, arr) = (i, j, k) -> ‚àÇx·∂†·∂†·∂ú(i, j, k, grid, arr)
@inline ‚àÇx·∂†·∂†·∂†_f(grid, arr) = (i, j, k) -> ‚àÇx·∂†·∂†·∂†(i, j, k, grid, arr)
@inline ‚àÇy·∂ú·∂ú·∂ú_f(grid, arr) = (i, j, k) -> ‚àÇy·∂ú·∂ú·∂ú(i, j, k, grid, arr)
@inline ‚àÇy·∂ú·∂ú·∂†_f(grid, arr) = (i, j, k) -> ‚àÇy·∂ú·∂ú·∂†(i, j, k, grid, arr)
@inline ‚àÇy·∂ú·∂†·∂ú_f(grid, arr) = (i, j, k) -> ‚àÇy·∂ú·∂†·∂ú(i, j, k, grid, arr)
@inline ‚àÇy·∂ú·∂†·∂†_f(grid, arr) = (i, j, k) -> ‚àÇy·∂ú·∂†·∂†(i, j, k, grid, arr)
@inline ‚àÇy·∂†·∂ú·∂ú_f(grid, arr) = (i, j, k) -> ‚àÇy·∂†·∂ú·∂ú(i, j, k, grid, arr)
@inline ‚àÇy·∂†·∂ú·∂†_f(grid, arr) = (i, j, k) -> ‚àÇy·∂†·∂ú·∂†(i, j, k, grid, arr)
@inline ‚àÇy·∂†·∂†·∂ú_f(grid, arr) = (i, j, k) -> ‚àÇy·∂†·∂†·∂ú(i, j, k, grid, arr)
@inline ‚àÇy·∂†·∂†·∂†_f(grid, arr) = (i, j, k) -> ‚àÇy·∂†·∂†·∂†(i, j, k, grid, arr)
@inline ‚àÇz·∂ú·∂ú·∂ú_f(grid, arr) = (i, j, k) -> ‚àÇz·∂ú·∂ú·∂ú(i, j, k, grid, arr)
@inline ‚àÇz·∂ú·∂ú·∂†_f(grid, arr) = (i, j, k) -> ‚àÇz·∂ú·∂ú·∂†(i, j, k, grid, arr)
@inline ‚àÇz·∂ú·∂†·∂ú_f(grid, arr) = (i, j, k) -> ‚àÇz·∂ú·∂†·∂ú(i, j, k, grid, arr)
@inline ‚àÇz·∂ú·∂†·∂†_f(grid, arr) = (i, j, k) -> ‚àÇz·∂ú·∂†·∂†(i, j, k, grid, arr)
@inline ‚àÇz·∂†·∂ú·∂ú_f(grid, arr) = (i, j, k) -> ‚àÇz·∂†·∂ú·∂ú(i, j, k, grid, arr)
@inline ‚àÇz·∂†·∂ú·∂†_f(grid, arr) = (i, j, k) -> ‚àÇz·∂†·∂ú·∂†(i, j, k, grid, arr)
@inline ‚àÇz·∂†·∂†·∂ú_f(grid, arr) = (i, j, k) -> ‚àÇz·∂†·∂†·∂ú(i, j, k, grid, arr)
@inline ‚àÇz·∂†·∂†·∂†_f(grid, arr) = (i, j, k) -> ‚àÇz·∂†·∂†·∂†(i, j, k, grid, arr)

@inline ‚àÇx·∂ú·µÉ·µÉ_f(grid, f::Function) = (i, j, k) -> Œ¥x·∂ú·µÉ·µÉ(f)(i, j, k) / grid.Œîx·∂ú·µÉ·µÉ
@inline ‚àÇx·∂†·µÉ·µÉ_f(grid, f::Function) = (i, j, k) -> Œ¥x·∂†·µÉ·µÉ(f)(i, j, k) / grid.Œîx·∂†·µÉ·µÉ
@inline ‚àÇy·µÉ·∂ú·µÉ_f(grid, f::Function) = (i, j, k) -> Œ¥y·µÉ·∂ú·µÉ(f)(i, j, k) / grid.Œîy·µÉ·∂ú·µÉ
@inline ‚àÇy·µÉ·∂†·µÉ_f(grid, f::Function) = (i, j, k) -> Œ¥y·µÉ·∂†·µÉ(f)(i, j, k) / grid.Œîy·µÉ·∂†·µÉ
@inline ‚àÇz·µÉ·µÉ·∂ú_f(grid, f::Function) = (i, j, k) -> Œ¥z·µÉ·µÉ·∂ú(f)(i, j, k) / grid.Œîz·µÉ·µÉ·∂ú
@inline ‚àÇz·µÉ·µÉ·∂†_f(grid, f::Function) = (i, j, k) -> Œ¥z·µÉ·µÉ·∂†(f)(i, j, k) / grid.Œîz·µÉ·µÉ·∂†

@inline add(f::Function, g::Function) = (i, j, k) -> f(i, j, k) + g(i, j, k)
@inline mult(f::Function, g::Function) = (i, j, k) -> f(i, j, k) * g(i, j, k)

@inline ‚àÇx¬≤_f(grid, f::Function) = (i, j, k) -> Œ¥x·∂†·µÉ·µÉ(Œ¥x·∂ú·µÉ·µÉ(f))(i, j, k) / (grid.Œîx·∂ú·µÉ·µÉ * grid.Œîx·∂†·µÉ·µÉ)
@inline ‚àÇy¬≤_f(grid, f::Function) = (i, j, k) -> Œ¥y·µÉ·∂†·µÉ(Œ¥y·µÉ·∂ú·µÉ(f))(i, j, k) / (grid.Œîy·µÉ·∂ú·µÉ * grid.Œîy·µÉ·∂†·µÉ)
@inline ‚àÇz¬≤_f(grid, f::Function) = (i, j, k) -> Œ¥z·µÉ·µÉ·∂†(Œ¥z·µÉ·µÉ·∂ú(f))(i, j, k) / (grid.Œîz·µÉ·µÉ·∂ú * grid.Œîz·µÉ·µÉ·∂†)
@inline ‚àá‚Çï¬≤_f(grid, f::Function) = add(‚àÇx¬≤_f(grid, f::Function), ‚àÇy¬≤_f(grid, f::Function))



@inline function u_tendency_func_full(
    i, j, k,
    grid,
    advection_scheme,
    coriolis,
    closure,
    buoyancy,
    background_fields,
    velocities,
    tracers,
    diffusivities,
    hydrostatic_pressure)

    total_velocities = (u = SumOfArrays{2}(velocities.u, background_fields.velocities.u),
                        v = SumOfArrays{2}(velocities.v, background_fields.velocities.v),
                        w = SumOfArrays{2}(velocities.w, background_fields.velocities.w))
    model_fields = merge(velocities, tracers)
    return ( - div_ùêØu(i, j, k, grid, advection_scheme, total_velocities, velocities.u)
             - div_ùêØu(i, j, k, grid, advection_scheme, velocities, background_fields.velocities.u)  # Pretty sure can ignore this term
             - x_f_cross_U(i, j, k, grid, coriolis, velocities)
             - hydrostatic_pressure_gradient_x(i, j, k, grid, hydrostatic_pressure)
             - ‚àÇ‚±º_œÑ‚ÇÅ‚±º(i, j, k, grid, closure, diffusivities, clock, model_fields, buoyancy))

end

@inline function v_tendency_func_full(
    i, j, k,
    grid,
    advection_scheme,
    coriolis,
    closure,
    buoyancy,
    background_fields,
    velocities,
    tracers,
    diffusivities,
    hydrostatic_pressure)

    total_velocities = (u = SumOfArrays{2}(velocities.u, background_fields.velocities.u),
                        v = SumOfArrays{2}(velocities.v, background_fields.velocities.v),
                        w = SumOfArrays{2}(velocities.w, background_fields.velocities.w))
    model_fields = merge(velocities, tracers)
    return ( - div_ùêØv(i, j, k, grid, advection_scheme, total_velocities, velocities.v)
             - div_ùêØv(i, j, k, grid, advection_scheme, velocities, background_fields.velocities.v)  # Pretty sure can ignore this term
             - y_f_cross_U(i, j, k, grid, coriolis, velocities)
             - hydrostatic_pressure_gradient_y(i, j, k, grid, hydrostatic_pressure)
             - ‚àÇ‚±º_œÑ‚ÇÇ‚±º(i, j, k, grid, closure, diffusivities, clock, model_fields, buoyancy))

end

@inline function u_tendency_func(i, j, k, grid, other_args)
    a = other_args
    advection_scheme = a.advection_scheme
    coriolis = a.coriolis
    closure = a.closure
    buoyancy = a.buoyancy
    background_fields = a.background_fields
    velocities = a.velocities
    tracers = a.tracers
    diffusivities = a.diffusivities
    hydrostatic_pressure = a.hydrostatic_pressure
    return u_tendency_func_full(i, j, k, grid, advection_scheme, coriolis, closure, buoyancy,
                            background_fields, velocities, tracers, diffusivities, hydrostatic_pressure)
end
@inline function v_tendency_func(i, j, k, grid, other_args)
    a = other_args
    advection_scheme = a.advection_scheme
    coriolis = a.coriolis
    closure = a.closure
    buoyancy = a.buoyancy
    background_fields = a.background_fields
    velocities = a.velocities
    tracers = a.tracers
    diffusivities = a.diffusivities
    hydrostatic_pressure = a.hydrostatic_pressure
    return v_tendency_func_full(i, j, k, grid, advection_scheme, coriolis, closure, buoyancy,
                            background_fields, velocities, tracers, diffusivities, hydrostatic_pressure)
end
@inline function u_cor_func(i, j, k, grid, other_args)
    a = other_args
    return - x_f_cross_U(i, j, k, grid, a.coriolis, a.velocities)
end
@inline function v_cor_func(i, j, k, grid, other_args)
    a = other_args
    return - y_f_cross_U(i, j, k, grid, a.coriolis, a.velocities)
end
@inline function u_visc_func(i, j, k, grid, other_args)
    a = other_args
    model_fields = merge(a.velocities, a.tracers)
    return - ‚àÇ‚±º_œÑ‚ÇÅ‚±º(i, j, k, grid, a.closure, a.diffusivities, clock, model_fields, a.buoyancy)
end
@inline function v_visc_func(i, j, k, grid, other_args)
    a = other_args
    model_fields = merge(a.velocities, a.tracers)
    return - ‚àÇ‚±º_œÑ‚ÇÇ‚±º(i, j, k, grid, a.closure, a.diffusivities, clock, model_fields, a.buoyancy)
end
@inline function u_prs_func(i, j, k, grid, other_args)
    a = other_args
    return - hydrostatic_pressure_gradient_x(i, j, k, grid, a.hydrostatic_pressure)
end
@inline function v_prs_func(i, j, k, grid, other_args)
    a = other_args
    return - hydrostatic_pressure_gradient_y(i, j, k, grid, a.hydrostatic_pressure)
end

@inline function u_err_func(i, j, k, grid, other_args)   # Error from ‚àá‚ãÖ(ùêÆu) ‚â† ùêÆ‚ãÖ‚àáu

    a = other_args

    u = SumOfArrays{2}(a.velocities.u, a.background_fields.velocities.u)
    v = SumOfArrays{2}(a.velocities.v, a.background_fields.velocities.v)
    w = SumOfArrays{2}(a.velocities.w, a.background_fields.velocities.w)

    return (  fÃÖ‚òÖ·µÉ·µÉ(u)(i, j, k) * fÃÖ·∂†·µÉ·µÉ(‚àÇx·∂ú·∂ú·∂ú_f(grid, u))(i, j, k)
            + fÃÖ·µÉ‚òÖ·µÉ(u)(i, j, k) * fÃÖ·∂†·µÉ·µÉ(‚àÇy·∂ú·∂ú·∂ú_f(grid, v))(i, j, k)
            + fÃÖ·µÉ·µÉ‚òÖ(u)(i, j, k) * fÃÖ·∂†·µÉ·µÉ(‚àÇz·∂ú·∂ú·∂ú_f(grid, w))(i, j, k))

end

@inline function v_err_func(i, j, k, grid, other_args)   # Error from ‚àá‚ãÖ(ùêÆv) ‚â† ùêÆ‚ãÖ‚àáv

    a = other_args

    u = SumOfArrays{2}(a.velocities.u, a.background_fields.velocities.u)
    v = SumOfArrays{2}(a.velocities.v, a.background_fields.velocities.v)
    w = SumOfArrays{2}(a.velocities.w, a.background_fields.velocities.w)

    return (  fÃÖ‚òÖ·µÉ·µÉ(v)(i, j, k) * fÃÖ·µÉ·∂†·µÉ(‚àÇx·∂ú·∂ú·∂ú_f(grid, u))(i, j, k)
            + fÃÖ·µÉ‚òÖ·µÉ(v)(i, j, k) * fÃÖ·µÉ·∂†·µÉ(‚àÇy·∂ú·∂ú·∂ú_f(grid, v))(i, j, k)
            + fÃÖ·µÉ·µÉ‚òÖ(v)(i, j, k) * fÃÖ·µÉ·∂†·µÉ(‚àÇz·∂ú·∂ú·∂ú_f(grid, w))(i, j, k))

end

#########################
# Lagrangian Œ∂ tendency #
#########################

@inline function vtcl_curl_func(u_func, v_func)

    return (i, j, k, grid, other_args) -> begin
        u_f = (i, j, k) -> u_func(i, j, k, grid, other_args)
        v_f = (i, j, k) -> v_func(i, j, k, grid, other_args)
        ‚àÇx·∂†·µÉ·µÉ_f(grid, v_f)(i, j, k) - ‚àÇy·µÉ·∂†·µÉ_f(grid, u_f)(i, j, k)
    end

end

@inline function F_Œ∂_hor_func(i, j, k, grid, other_args)

    a = other_args
    u = SumOfArrays{2}(a.velocities.u, a.background_fields.velocities.u)
    v = SumOfArrays{2}(a.velocities.v, a.background_fields.velocities.v)
    w = SumOfArrays{2}(a.velocities.w, a.background_fields.velocities.w)

    return (- fÃÖ·∂†·∂†·µÉ(‚àÇx·∂ú·∂ú·∂ú_f(grid, u))(i, j, k) * fÃÖ‚òÖ·µÉ·µÉ(‚àÇx·∂†·∂†·∂ú_f(grid, v))(i, j, k)
            - fÃÖ·∂†·∂†·µÉ(‚àÇy·∂ú·∂ú·∂ú_f(grid, v))(i, j, k) * fÃÖ·µÉ‚òÖ·µÉ(‚àÇx·∂†·∂†·∂ú_f(grid, v))(i, j, k)
            + fÃÖ·∂†·∂†·µÉ(‚àÇx·∂ú·∂ú·∂ú_f(grid, u))(i, j, k) * fÃÖ‚òÖ·µÉ·µÉ(‚àÇy·∂†·∂†·∂ú_f(grid, u))(i, j, k)
            + fÃÖ·∂†·∂†·µÉ(‚àÇy·∂ú·∂ú·∂ú_f(grid, v))(i, j, k) * fÃÖ·µÉ‚òÖ·µÉ(‚àÇy·∂†·∂†·∂ú_f(grid, u))(i, j, k))

end

@inline function F_Œ∂_vrt_func(i, j, k, grid, other_args)

    a = other_args
    u = SumOfArrays{2}(a.velocities.u, a.background_fields.velocities.u)
    v = SumOfArrays{2}(a.velocities.v, a.background_fields.velocities.v)
    w = SumOfArrays{2}(a.velocities.w, a.background_fields.velocities.w)

    return (- fÃÖ·µÉ·∂†·∂ú(‚àÇx·∂†·∂ú·∂†_f(grid, w))(i, j, k) * fÃÖ·∂†·µÉ·∂ú(‚àÇz·∂ú·∂†·∂†_f(grid, v))(i, j, k)
            + fÃÖ·∂†·µÉ·∂ú(‚àÇy·∂ú·∂†·∂†_f(grid, w))(i, j, k) * fÃÖ·µÉ·∂†·∂ú(‚àÇz·∂†·∂ú·∂†_f(grid, u))(i, j, k))
    
end

@inline function Œ∂_adv_func(i, j, k, grid, other_args)

    a = other_args
    u = SumOfArrays{2}(a.velocities.u, a.background_fields.velocities.u)
    v = SumOfArrays{2}(a.velocities.v, a.background_fields.velocities.v)
    w = SumOfArrays{2}(a.velocities.w, a.background_fields.velocities.w)
    Œ∂_f = (i, j, k) -> ‚àÇx·∂†·∂†·∂ú(i, j, k, grid, v) - ‚àÇy·∂†·∂†·∂ú(i, j, k, grid, u)

    return (  fÃÖ‚òÖ·µÉ·µÉ(fÃÖ·µÉ·∂†·µÉ(u))(i, j, k) * fÃÖ·∂†·µÉ·µÉ(‚àÇx·∂ú·µÉ·µÉ_f(grid, Œ∂_f))(i, j, k)
            + fÃÖ·µÉ‚òÖ·µÉ(fÃÖ·∂†·µÉ·µÉ(v))(i, j, k) * fÃÖ·µÉ·∂†·µÉ(‚àÇy·µÉ·∂ú·µÉ_f(grid, Œ∂_f))(i, j, k)
            + fÃÖ·∂†·∂†·µÉ(fÃÖ·µÉ·µÉ·∂ú(w))(i, j, k) * fÃÖ·µÉ·µÉ·∂ú(‚àÇz·µÉ·µÉ·∂†_f(grid, Œ∂_f))(i, j, k))
    
end

@inline function F_Œ∂_cor_func(i, j, k, grid, other_args)

    a = other_args
    u = SumOfArrays{2}(a.velocities.u, a.background_fields.velocities.u)
    v = SumOfArrays{2}(a.velocities.v, a.background_fields.velocities.v)
    f = a.coriolis.f

    Œ¥_f = (i, j, k) -> ‚àÇx·∂ú·∂ú·∂ú(i, j, k, grid, u) + ‚àÇy·∂ú·∂ú·∂ú(i, j, k, grid, v)
    return - f * fÃÖ·∂†·∂†·µÉ(Œ¥_f)(i, j, k)
    
end

@inline function Œ∂_h_visc_func(i, j, k, grid, other_args)

    a = other_args
    u = SumOfArrays{2}(a.velocities.u, a.background_fields.velocities.u)
    v = SumOfArrays{2}(a.velocities.v, a.background_fields.velocities.v)
    Œ∂_f = (i, j, k) -> ‚àÇx·∂†·∂†·∂ú(i, j, k, grid, v) - ‚àÇy·∂†·∂†·∂ú(i, j, k, grid, u)

    return other_args.diffusivities[1].ŒΩ * ‚àá‚Çï¬≤_f(grid, Œ∂_f)(i, j, k)
    
end

@inline function Œ∂_v_visc_func(i, j, k, grid, other_args)

    a = other_args
    u = SumOfArrays{2}(a.velocities.u, a.background_fields.velocities.u)
    v = SumOfArrays{2}(a.velocities.v, a.background_fields.velocities.v)
    Œ∂_f = (i, j, k) -> ‚àÇx·∂†·∂†·∂ú(i, j, k, grid, v) - ‚àÇy·∂†·∂†·∂ú(i, j, k, grid, u)

    return other_args.diffusivities[2].ŒΩ * ‚àÇz¬≤_f(grid, Œ∂_f)(i, j, k)
    
end

@inline Œ∂_err_func = vtcl_curl_func(u_err_func, v_err_func)

@inline Œ∂_tendency_func = vtcl_curl_func(u_tendency_func, v_tendency_func)

#########################
# Lagrangian Œ¥ tendency #
#########################

@inline function hor_div_func(u_func, v_func)

    return (i, j, k, grid, other_args) -> begin
        u_f = (i, j, k) -> u_func(i, j, k, grid, other_args)
        v_f = (i, j, k) -> v_func(i, j, k, grid, other_args)
        ‚àÇx·∂ú·µÉ·µÉ_f(grid, u_f)(i, j, k) + ‚àÇy·µÉ·∂ú·µÉ_f(grid, v_f)(i, j, k)
    end

end

@inline Œ¥_tendency_func = hor_div_func(u_tendency_func, v_tendency_func)
@inline Œ¥_err_func      = hor_div_func(     u_err_func, v_err_func     )
@inline F_Œ¥_cor_func    = hor_div_func(     u_cor_func, v_cor_func     )
@inline F_Œ¥_prs_func   = hor_div_func(     u_prs_func, v_prs_func     )

@inline function Œ¥_h_visc_func(i, j, k, grid, other_args)

    a = other_args
    u = SumOfArrays{2}(a.velocities.u, a.background_fields.velocities.u)
    v = SumOfArrays{2}(a.velocities.v, a.background_fields.velocities.v)
    Œ¥_f = (i, j, k) -> ‚àÇx·∂ú·∂ú·∂ú(i, j, k, grid, u) + ‚àÇy·∂ú·∂ú·∂ú(i, j, k, grid, v)

    return other_args.diffusivities[1].ŒΩ * ‚àá‚Çï¬≤_f(grid, Œ¥_f)(i, j, k)
    
end

@inline function Œ¥_v_visc_func(i, j, k, grid, other_args)

    a = other_args
    u = SumOfArrays{2}(a.velocities.u, a.background_fields.velocities.u)
    v = SumOfArrays{2}(a.velocities.v, a.background_fields.velocities.v)
    Œ¥_f = (i, j, k) -> ‚àÇx·∂ú·∂ú·∂ú(i, j, k, grid, u) + ‚àÇy·∂ú·∂ú·∂ú(i, j, k, grid, v)

    return other_args.diffusivities[2].ŒΩ * ‚àÇz¬≤_f(grid, Œ¥_f)(i, j, k)
    
end

@inline function Œ¥_adv_func(i, j, k, grid, other_args)

    a = other_args
    u = SumOfArrays{2}(a.velocities.u, a.background_fields.velocities.u)
    v = SumOfArrays{2}(a.velocities.v, a.background_fields.velocities.v)
    w = SumOfArrays{2}(a.velocities.w, a.background_fields.velocities.w)
    u_xx_f = ‚àÇx·∂†·µÉ·µÉ_f(grid, ‚àÇx·∂ú·∂ú·∂ú_f(grid, u))
    u_yx_f = ‚àÇy·µÉ·∂†·µÉ_f(grid, ‚àÇx·∂ú·∂ú·∂ú_f(grid, u))
    u_zx_f = ‚àÇz·µÉ·µÉ·∂†_f(grid, ‚àÇx·∂ú·∂ú·∂ú_f(grid, u))
    v_xy_f = ‚àÇx·∂†·µÉ·µÉ_f(grid, ‚àÇy·∂ú·∂ú·∂ú_f(grid, v))
    v_yy_f = ‚àÇy·µÉ·∂†·µÉ_f(grid, ‚àÇy·∂ú·∂ú·∂ú_f(grid, v))
    v_zy_f = ‚àÇz·µÉ·µÉ·∂†_f(grid, ‚àÇy·∂ú·∂ú·∂ú_f(grid, v))

    return (  fÃÖ‚òÖ·µÉ·µÉ(fÃÖ·∂ú·µÉ·µÉ(u))(i, j, k) * fÃÖ·∂ú·µÉ·µÉ(u_xx_f)(i, j, k)
            + fÃÖ‚òÖ·µÉ·µÉ(fÃÖ·µÉ·∂ú·µÉ(v))(i, j, k) * fÃÖ·µÉ·∂ú·µÉ(u_yx_f)(i, j, k)
            + fÃÖ‚òÖ·µÉ·µÉ(fÃÖ·µÉ·µÉ·∂ú(w))(i, j, k) * fÃÖ·µÉ·µÉ·∂ú(u_zx_f)(i, j, k)
            + fÃÖ·µÉ‚òÖ·µÉ(fÃÖ·∂ú·µÉ·µÉ(u))(i, j, k) * fÃÖ·∂ú·µÉ·µÉ(v_xy_f)(i, j, k)
            + fÃÖ·µÉ‚òÖ·µÉ(fÃÖ·µÉ·∂ú·µÉ(v))(i, j, k) * fÃÖ·µÉ·∂ú·µÉ(v_yy_f)(i, j, k)
            + fÃÖ·µÉ‚òÖ·µÉ(fÃÖ·µÉ·µÉ·∂ú(w))(i, j, k) * fÃÖ·µÉ·µÉ·∂ú(v_zy_f)(i, j, k))

end

@inline function F_Œ¥_hor_func(i, j, k, grid, other_args)

    a = other_args
    u = SumOfArrays{2}(a.velocities.u, a.background_fields.velocities.u)
    v = SumOfArrays{2}(a.velocities.v, a.background_fields.velocities.v)

    return - (  (‚àÇx·∂ú·µÉ·µÉ_f(grid, fÃÖ‚òÖ·µÉ·µÉ(u)))(i, j, k) ^ 2
              + 2‚àÇx·∂ú·µÉ·µÉ_f(grid, fÃÖ·∂†·∂ú·µÉ(v))(i, j, k) * ‚àÇy·µÉ·∂ú·µÉ_f(grid, fÃÖ·∂ú·∂†·µÉ(u))(i, j, k)
              + (‚àÇy·µÉ·∂ú·µÉ_f(grid, fÃÖ·µÉ‚òÖ·µÉ(v)))(i, j, k) ^ 2)
    
end

@inline function F_Œ¥_vrt_func(i, j, k, grid, other_args)

    a = other_args
    u = SumOfArrays{2}(a.velocities.u, a.background_fields.velocities.u)
    v = SumOfArrays{2}(a.velocities.v, a.background_fields.velocities.v)
    w = SumOfArrays{2}(a.velocities.w, a.background_fields.velocities.w)

    return - (  ‚àÇx·∂ú·µÉ·µÉ_f(grid, fÃÖ·∂†·µÉ·∂ú(w))(i, j, k) * ‚àÇz·µÉ·µÉ·∂ú_f(grid, fÃÖ·∂ú·µÉ·∂†(u))(i, j, k)
              + ‚àÇy·µÉ·∂ú·µÉ_f(grid, fÃÖ·µÉ·∂†·∂ú(w))(i, j, k) * ‚àÇz·µÉ·µÉ·∂ú_f(grid, fÃÖ·µÉ·∂ú·∂†(v))(i, j, k))

end

#=@inline function u_divùêØ_func(i, j, k, grid, other_args)
    
    a = other_args
    total_velocities = (u = SumOfArrays{2}(a.velocities.u, a.background_fields.velocities.u),
                        v = SumOfArrays{2}(a.velocities.v, a.background_fields.velocities.v),
                        w = SumOfArrays{2}(a.velocities.w, a.background_fields.velocities.w))
    return (  div_ùêØu(i, j, k, grid, a.advection_scheme, total_velocities, a.velocities.u)
            + div_ùêØu(i, j, k, grid, a.advection_scheme, a.velocities, a.background_fields.velocities.u))
    
end

@inline function v_divùêØ_func(i, j, k, grid, other_args)
    
    a = other_args
    total_velocities = (u = SumOfArrays{2}(a.velocities.u, a.background_fields.velocities.u),
                        v = SumOfArrays{2}(a.velocities.v, a.background_fields.velocities.v),
                        w = SumOfArrays{2}(a.velocities.w, a.background_fields.velocities.w))
    return (  div_ùêØv(i, j, k, grid, a.advection_scheme, total_velocities, a.velocities.v)
            + div_ùêØv(i, j, k, grid, a.advection_scheme, a.velocities, a.background_fields.velocities.v))
    
end

@inline function my_u_divùêØ_func(i, j, k, grid, other_args)

    a = other_args
    u = SumOfArrays{2}(a.velocities.u, a.background_fields.velocities.u)
    v = SumOfArrays{2}(a.velocities.v, a.background_fields.velocities.v)
    w = SumOfArrays{2}(a.velocities.w, a.background_fields.velocities.w)
    return (  ‚àÇx·∂†·µÉ·µÉ_f(grid, mult(fÃÖ·∂ú·µÉ·µÉ(u), fÃÖ·∂ú·µÉ·µÉ(u)))(i, j, k)
            + ‚àÇy·µÉ·∂ú·µÉ_f(grid, mult(fÃÖ·∂†·µÉ·µÉ(v), fÃÖ·µÉ·∂†·µÉ(u)))(i, j, k)
            + ‚àÇz·µÉ·µÉ·∂ú_f(grid, mult(fÃÖ·∂†·µÉ·µÉ(w), fÃÖ·µÉ·µÉ·∂†(u)))(i, j, k))
    
end

@inline function my_v_divùêØ_func(i, j, k, grid, other_args)

    a = other_args
    u = SumOfArrays{2}(a.velocities.u, a.background_fields.velocities.u)
    v = SumOfArrays{2}(a.velocities.v, a.background_fields.velocities.v)
    w = SumOfArrays{2}(a.velocities.w, a.background_fields.velocities.w)
    return (  ‚àÇx·∂ú·µÉ·µÉ_f(grid, mult(fÃÖ·µÉ·∂†·µÉ(u), fÃÖ·∂†·µÉ·µÉ(v)))(i, j, k)
            + ‚àÇy·µÉ·∂†·µÉ_f(grid, mult(fÃÖ·µÉ·∂ú·µÉ(v), fÃÖ·µÉ·∂ú·µÉ(v)))(i, j, k)
            + ‚àÇz·µÉ·µÉ·∂ú_f(grid, mult(fÃÖ·µÉ·∂†·µÉ(w), fÃÖ·µÉ·µÉ·∂†(v)))(i, j, k))
    
end=#

#=@inline function Œ∂_h_adv_func(i, j, k, grid, other_args)

    a = other_args
    u = SumOfArrays{2}(a.velocities.u, a.background_fields.velocities.u)
    v = SumOfArrays{2}(a.velocities.v, a.background_fields.velocities.v)
    Œ∂_f = (i, j, k) -> ‚àÇx·∂†·∂†·∂ú(i, j, k, grid, v) - ‚àÇy·∂†·∂†·∂ú(i, j, k, grid, u)

    return (  fÃÖ‚òÖ·µÉ·µÉ(fÃÖ·µÉ·∂†·µÉ(u))(i, j, k) * fÃÖ·∂†·µÉ·µÉ(‚àÇx·∂ú·µÉ·µÉ_f(grid, Œ∂_f))(i, j, k)
            + fÃÖ·µÉ‚òÖ·µÉ(fÃÖ·∂†·µÉ·µÉ(v))(i, j, k) * fÃÖ·µÉ·∂†·µÉ(‚àÇy·µÉ·∂ú·µÉ_f(grid, Œ∂_f))(i, j, k))
    
end=#