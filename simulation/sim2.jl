# Functions for running an individual simulation

using Oceananigans
using Printf
using Oceananigans.TurbulenceClosures
using CUDA

using StructArrays
using Oceananigans.Fields
using Oceananigans.Architectures: arch_array

include("../QOL.jl")
include("../instabilities/modes.jl")

function physical_quantities_from_inputs(Ri, s)

    # Get the dimensional parameters of the problem
    p = get_scales(Ri, s)

    # Set the viscosities

    # Set the domain size
    Lx = 2 * 2*pi * p.L * 0.4^0.5   # Zonal extent, set to 2 wavelengths of the most unstable mode
    Ly = Lx                         # Meridional extent
    Lz = p.H                        # Vertical extent

    # Set relative amplitude for random velocity perturbation
    kick = 0.05 * p.U

    B‚ÇÄ(x, y, z, t) = p.M¬≤ * y + p.N¬≤ * z    # Buoyancy
    U‚ÇÄ(x, y, z, t) = -p.M¬≤/p.f * (z + Lz)   # Zonal velocity

    # Set the initial perturbation conditions, a random velocity perturbation
    u·µ¢, v·µ¢, w·µ¢, b·µ¢ = generate_ic(Ri, Lx, p.U)

    u_bcs = FieldBoundaryConditions(top = GradientBoundaryCondition(0.0),
                                    bottom = GradientBoundaryCondition(0.0))
    # This is applied to the perturbation u, not including the background U‚ÇÄ
    BCs = (u = u_bcs,)

    return p, (x = Lx, y = Ly, z = Lz), (u = u·µ¢, v = v·µ¢, w = w·µ¢, b = b·µ¢), (U = U‚ÇÄ, B = B‚ÇÄ), BCs

end

struct MyParticle
    x::Float64
    y::Float64
    z::Float64
    b::Float64
    Œ∂::Float64
    Œ¥::Float64
end

function run_sim(params, label)

    resolution = params.res

    @info label

    p, domain, ic, background, BCs = physical_quantities_from_inputs(params.Ri, params.s)
    
    # Here, p holds the physical parameters

    # Set the time-stepping parameters
    max_Œît = 0.4 * pi / (p.N¬≤^0.5)
    duration = 1 / real(least_stable_mode(params.Ri, 4œÄ/domain.x, 0, rate_only = true))

    # Build the grid
    if params.GPU
        grid = RectilinearGrid(GPU(), size = resolution, x = (0, domain.x), y = (0, domain.y), z = (-domain.z, 0), topology = (Periodic, Periodic, Bounded))
    else
        grid = RectilinearGrid(size = resolution, x = (0, domain.x), y = (0, domain.y), z = (-domain.z, 0), topology = (Periodic, Periodic, Bounded))
    end

    # Set the diffusivities and background fields
    B_field = BackgroundField(background.B)
    U_field = BackgroundField(background.U)
    if sim_params().horizontal_hyperviscosity
        diff_h = ScalarBiharmonicDiffusivity(Oceananigans.TurbulenceClosures.HorizontalFormulation(), Float64, ŒΩ = params.ŒΩ_h, Œ∫ = params.ŒΩ_h)
    else
        diff_h = HorizontalScalarDiffusivity(ŒΩ = params.ŒΩ_h, Œ∫ = params.ŒΩ_h)
    end
    diff_v = VerticalScalarDiffusivity(ŒΩ = params.ŒΩ_v, Œ∫ = params.ŒΩ_v)

    # Introduce Lagrangian particles in an n √ó n grid
    n = 5
    x‚ÇÄ = [domain.x * (i % n) / n for i = 0 : n^2-1]
    y‚ÇÄ = [domain.y * (i √∑ n) / n for i = 0: n^2-1]
    z‚ÇÄ = zeros(n^2)
    b = z‚ÇÄ
    Œ∂ = z‚ÇÄ
    Œ¥ = z‚ÇÄ
    if params.GPU
        x‚ÇÄ, y‚ÇÄ, z‚ÇÄ, b, Œ∂, Œ¥ = CuArray.([x‚ÇÄ, y‚ÇÄ, z‚ÇÄ, b, Œ∂, Œ¥])
    end

    #=b = arch_array(CPU(), zeros(n^2))
    Œ∂ = arch_array(CPU(), zeros(n^2))
    Œ¥ = arch_array(CPU(), zeros(n^2))=#
    particles = StructArray{MyParticle}((x‚ÇÄ, y‚ÇÄ, z‚ÇÄ, b, Œ∂, Œ¥))

    #=function drifter_dynamics(particles, model, Œît)
        u = Field(model.velocities.u + model.background_fields.velocities.u)    # Unpack velocity `Field`s
        v = Field(model.velocities.v)
        Œ∂ = Field(‚àÇx(v) - ‚àÇy(u))
        model.particles.properties.Œ∂ .= Œ∂
    end=#

    function drifter_dynamics!(particles, model, Œît)
        u = Field(model.velocities.u + model.background_fields.velocities.u)    # Unpack velocity `Field`s
        v = Field(model.velocities.v)
        Œ∂ = Field(‚àÇx(v) - ‚àÇy(u))
        N = length(particles.properties.x)
        x = particles.properties.x
        y = particles.properties.y
        z = particles.properties.z
        ùê± = [(x[i], y[i], z[i]) for i = 1 : N]
        model.particles.properties.Œ∂ .= [interpolate(ùê±[i], Œ∂) for i = 1 : N]
    end

    tracers = TracerFields((:b,), grid)
    b = tracers[1]

    # "Remember to use CuArray instead of regular Array when storing particle locations and properties on the GPU"?????

    # Build the model
    model = NonhydrostaticModel(; grid,
              advection = params.advection_scheme(),  # Specify the advection scheme.  Another good choice is WENO() which is more accurate but slower
              timestepper = :RungeKutta3, # Set the timestepping scheme, here 3rd order Runge-Kutta
              tracers = :b,  # Set the name(s) of any tracers, here b is buoyancy and c is a passive tracer (e.g. dye)
              buoyancy = Buoyancy(model = BuoyancyTracer()), # this tells the model that b will act as the buoyancy (and influence momentum)
              background_fields = (b = B_field, u = U_field),
              coriolis = coriolis = FPlane(f = p.f),
              closure = (diff_h, diff_v),
              boundary_conditions = BCs,
              )

    tracked_fields = model.tracers
    lagrangian_drifters = LagrangianParticles(particles; tracked_fields = (; b), dynamics = drifter_dynamics!)          

    model = NonhydrostaticModel(; grid,
              advection = params.advection_scheme(),  # Specify the advection scheme.  Another good choice is WENO() which is more accurate but slower
              timestepper = :RungeKutta3, # Set the timestepping scheme, here 3rd order Runge-Kutta
              tracers = :b,  # Set the name(s) of any tracers, here b is buoyancy and c is a passive tracer (e.g. dye)
              buoyancy = Buoyancy(model = BuoyancyTracer()), # this tells the model that b will act as the buoyancy (and influence momentum)
              background_fields = (b = B_field, u = U_field),
              coriolis = coriolis = FPlane(f = p.f),
              closure = (diff_h, diff_v),
              boundary_conditions = BCs,
              particles = lagrangian_drifters
              )

    # Set initial conditions
    set!(model, u = ic.u, v = ic.v, w = ic.w, b = ic.b)
    
    # Build the simulation
    simulation = Simulation(model, Œît = minimum([max_Œît/10, p.T/100]), stop_time = duration)

    # ### The `TimeStepWizard`
    #
    # The TimeStepWizard manages the time-step adaptively, keeping the
    # Courant-Freidrichs-Lewy (CFL) number close to `1.0` while ensuring
    # the time-step does not increase beyond the maximum allowable value
    wizard = TimeStepWizard(cfl = 0.5, max_change = 1.1, max_Œît = max_Œît)

    # Still some numerical noise at CFL 0.1 for Ri = 10‚Å¥, but none for CFL = 0.05

    # A "Callback" pauses the simulation after a specified number of timesteps and calls a function (here the timestep wizard to update the timestep)
    # To update the timestep more or less often, change IterationInterval in the next line
    simulation.callbacks[:wizard] = Callback(wizard, IterationInterval(1))

    # ### A progress messenger
    # We add a callback that prints out a helpful progress message while the simulation runs.

    start_time = time_ns()

    progress(sim) = @printf("i: % 6d, sim time: % 10s, wall time: % 10s, Œît: % 10s, CFL: %.2e\n",
                            sim.model.clock.iteration,
                            prettytime(sim.model.clock.time),
                            prettytime(1e-9 * (time_ns() - start_time)),
                            sim.Œît,
                            AdvectiveCFL(sim.Œît)(sim.model))

    simulation.callbacks[:progress] = Callback(progress, IterationInterval(100))

    # ### Output

    u = Field(model.velocities.u + model.background_fields.velocities.u)    # Unpack velocity `Field`s
    v = Field(model.velocities.v)
    w = Field(model.velocities.w)
    b = Field(model.tracers.b + model.background_fields.tracers.b)          # Extract the buoyancy and add the background field
    b_pert = Field(model.tracers.b)
    pÃÉ = Field(model.pressures.pNHS)    # (should i do + .pHY‚Ä≤?) # (ignoring the background pressure field, M¬≤y(z+H) + N¬≤z¬≤/2)

    # Now calculate the derivatives of ùêÆ
    # Only 8 are needed, since ‚àá‚ãÖùêÆ = 0
    Œ∂ = Field(‚àÇx(v) - ‚àÇy(u))
    Œ¥ = Field(‚àÇx(u) + ‚àÇy(v))    # The horizontal divergence
    u_x = Field(‚àÇx(u))
    v_x = Field(‚àÇx(v))
    u_z = Field(‚àÇz(u))
    v_z = Field(‚àÇz(v))
    w_x = Field(‚àÇx(w))
    w_y = Field(‚àÇy(w))
    u_g = Field(‚àÇy(pÃÉ)/p.f + model.background_fields.velocities.u)
    v_g = Field(-‚àÇx(pÃÉ)/p.f)
    Œ∂_g = Field(‚àÇx(v_g) - ‚àÇy(u_g))

    # Also calculate derivatives of b
    b_x = Field(‚àÇx(b))
    b_y = Field(Field(‚àÇy(b_pert)) + p.M¬≤)
    b_z = Field(‚àÇz(b))

    # Compute y-averages ùêÆÃÖ(x,z) and bÃÖ(x,z)
    uÃÖ = Field(Average(u, dims = 2))
    vÃÖ = Field(Average(v, dims = 2))
    wÃÖ = Field(Average(w, dims = 2))
    bÃÖ = Field(Average(b, dims = 2))
    ‚Ñ¨ = Field(w * b_pert)
    avg_‚Ñ¨ = Field(Average(‚Ñ¨, dims = 2))

    # Output Lagrangian particles
    filename = "raw_data/" * label * "_particles"
    simulation.output_writers[:particles] =
        JLD2OutputWriter(model, (particles = model.particles,),
                                filename = filename * ".jld2",
                                schedule = TimeInterval(p.T/20),
                                overwrite_existing = true)

    # Output the slice y = 0
    filename = "raw_data/" * label * "_BI_xz"
    simulation.output_writers[:xz_slices] =
        JLD2OutputWriter(model, (; u, v, w, b, Œ∂, Œ¥, u_x, v_x, u_z, v_z, w_x, w_y, b_x, b_y, b_z, u_g, v_g, Œ∂_g),
                                filename = filename * ".jld2",
                                indices = (:, 1, :),
                                schedule = TimeInterval(p.T/20),
                                overwrite_existing = true)

    # Output the slice z = 0
    filename = "raw_data/" * label * "_BI_xy"
    simulation.output_writers[:xy_slices] =
        JLD2OutputWriter(model, (; u, v, w, b, Œ∂, Œ¥, u_x, v_x, u_z, v_z, w_x, w_y, b_x, b_y, b_z, u_g, v_g, Œ∂_g),
                                filename = filename * ".jld2",
                                indices = (:, :, resolution[3]),
                                schedule = TimeInterval(p.T/20),
                                overwrite_existing = true)

    # Output the slice x = 0
    filename = "raw_data/" * label * "_BI_yz"
    simulation.output_writers[:yz_slices] =
        JLD2OutputWriter(model, (; u, v, w, b, Œ∂, Œ¥, u_x, v_x, u_z, v_z, w_x, w_y, b_x, b_y, b_z, u_g, v_g, Œ∂_g),
                                filename = filename * ".jld2",
                                indices = (1, :, :),
                                schedule = TimeInterval(p.T/20),
                                overwrite_existing = true)

    # Output a horizontal slice in the middle (verticall speaking)
    filename = "raw_data/" * label * "_BI_xy_mid"
    simulation.output_writers[:xy_slices_mid] =
        JLD2OutputWriter(model, (; u, v, w, b, Œ∂, Œ¥, u_x, v_x, u_z, v_z, w_x, w_y, b_x, b_y, b_z, u_g, v_g, Œ∂_g),
                                filename = filename * ".jld2",
                                indices = (:, :, Int64(round((resolution[3]+1) / 2))),
                                schedule = TimeInterval(p.T/20),
                                overwrite_existing = true)

    filename = "raw_data/" * label * "_BI_y-avg"
    simulation.output_writers[:xy_slices_mid] =
        JLD2OutputWriter(model, (; uÃÖ, vÃÖ, wÃÖ, bÃÖ, avg_‚Ñ¨),
                                filename = filename * ".jld2",
                                schedule = TimeInterval(p.T/20),
                                overwrite_existing = true)

    #=filename = "raw_data/" * label * "_full"
    simulation.output_writers[:full] =
        JLD2OutputWriter(model, (; u, v, w, b),
                                filename = filename * ".jld2",
                                schedule = TimeInterval(duration / 4),
                                overwrite_existing = true)=#

    nothing # hide

    # Now, run the simulation
    @printf("Simulation will last %s\n", prettytime(duration))
    run!(simulation)

end