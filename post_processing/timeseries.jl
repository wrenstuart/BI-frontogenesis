include("pp-io.jl")
include("drifters-refactored.jl")

label = "new_zeta_balance2"

function investigate_lagr_Œ∂_balance(label::String, drifter_num::Int64, plot_mode = "tracked")
    
    # WE ASSUME THAT BI_XY AND PARTICLE ITERATIONS ARE THE SAME
    # This plots the various terms affecting the Lagrangian change in Œ∂,
    # following particles as we do so. "tracked" mode uses particle-tracked data,
    # while "interpolated" looks at the Eulerian fields saved at the top and
    # interpolates them onto the particles in post-processing

    check_pp_dir(label)
    eul_data = topdata(label)
    t, tracked_drifter_data = extract_tracked_drifter_data(label)
    num_iters = length(tracked_drifter_data[drifter_num])
    iterations = eul_data.iterations

    grid_pos = (Face(), Face())

    x = [tracked_drifter_data[drifter_num][i].x for i = 1 : num_iters]
    y = [tracked_drifter_data[drifter_num][i].y for i = 1 : num_iters]
    Œ∂_tracked = [tracked_drifter_data[drifter_num][i].Œ∂ for i = 1 : num_iters]
    Œ∂_tendency_tracked = [tracked_drifter_data[drifter_num][i].Œ∂_tendency for i = 1 : num_iters]
    F_Œ∂_cor_tracked = [tracked_drifter_data[drifter_num][i].F_Œ∂_cor for i = 1 : num_iters]
    Œ∂_visc_tracked = [tracked_drifter_data[drifter_num][i].Œ∂_visc for i = 1 : num_iters]
    Œ∂_h_visc_tracked = [tracked_drifter_data[drifter_num][i].Œ∂_h_visc for i = 1 : num_iters]
    Œ∂_v_visc_tracked = [tracked_drifter_data[drifter_num][i].Œ∂_v_visc for i = 1 : num_iters]
    Œ∂_err_tracked = [tracked_drifter_data[drifter_num][i].Œ∂_err for i = 1 : num_iters]
    F_Œ∂_hor_tracked = [tracked_drifter_data[drifter_num][i].F_Œ∂_hor for i = 1 : num_iters]
    F_Œ∂_vrt_tracked = [tracked_drifter_data[drifter_num][i].F_Œ∂_vrt for i = 1 : num_iters]
    Œ∂_adv_tracked = [tracked_drifter_data[drifter_num][i].Œ∂_adv for i = 1 : num_iters]
    Œ∂_h_adv_tracked = [tracked_drifter_data[drifter_num][i].Œ∂_h_adv for i = 1 : num_iters]
    Œ∂_interpolated = extract_interpolated_drifter_data(eul_data, "Œ∂", grid_pos, x, y, t)
    Œ∂_tendency_interpolated = extract_interpolated_drifter_data(eul_data, "Œ∂_tendency", grid_pos, x, y, t)
    F_Œ∂_cor_interpolated = extract_interpolated_drifter_data(eul_data, "F_Œ∂_cor", grid_pos, x, y, t)
    Œ∂_visc_interpolated = extract_interpolated_drifter_data(eul_data, "Œ∂_visc", grid_pos, x, y, t)
    Œ∂_err_interpolated = extract_interpolated_drifter_data(eul_data, "Œ∂_err", grid_pos, x, y, t)
    F_Œ∂_hor_interpolated = extract_interpolated_drifter_data(eul_data, "F_Œ∂_hor", grid_pos, x, y, t)
    F_Œ∂_vrt_interpolated = extract_interpolated_drifter_data(eul_data, "F_Œ∂_vrt", grid_pos, x, y, t)
    Œ∂_adv_interpolated = extract_interpolated_drifter_data(eul_data, "Œ∂_adv", grid_pos, x, y, t)
    Œ∂_h_adv_interpolated = extract_interpolated_drifter_data(eul_data, "Œ∂_h_adv", grid_pos, x, y, t)

    fig = Figure()
    ax = Axis(fig[1, 1])
    lim = 5e-7
    if plot_mode == "tracked"
        lines!(f*t, Œ∂_tendency_tracked + Œ∂_adv_tracked + Œ∂_err_tracked, label = L"\mathrm{D}\zeta/\mathrm{D}t")
        lines!(f*t, F_Œ∂_cor_tracked, label = L"\zeta_\text{Cor}")
        lines!(f*t, Œ∂_v_visc_tracked, label = L"\zeta_\text{visc,v}")
        lines!(f*t, Œ∂_h_visc_tracked, label = L"\zeta_\text{visc,h}")
        lines!(f*t, F_Œ∂_hor_tracked, label = L"F_{\zeta,\text{hor}}")
        lines!(f*t, F_Œ∂_vrt_tracked, label = L"F_{\zeta,\text{vrt}}")
        lines!(f*t, Œ∂_tendency_tracked + Œ∂_adv_tracked + Œ∂_err_tracked - (
            F_Œ∂_cor_tracked + Œ∂_v_visc_tracked + Œ∂_h_visc_tracked + F_Œ∂_hor_tracked + F_Œ∂_vrt_tracked),
            label = "residual", color = :black)
        lines!(f*t, Œ∂_err_tracked, label = L"\zeta_{\text{err}}", color = :black, linestyle = :dot)
        lim = maximum([maximum(abs.(Œ∂_visc_tracked)), maximum(abs.(F_Œ∂_hor_tracked))])
    elseif plot_mode == "interpolated"
        lines!(f*t, Œ∂_tendency_interpolated + Œ∂_adv_interpolated + Œ∂_err_interpolated, label = L"\mathrm{D}\zeta/\mathrm{D}t")
        lines!(f*t, F_Œ∂_cor_interpolated, label = L"\zeta_\text{Cor}")
        lines!(f*t, Œ∂_visc_interpolated, label = L"\zeta_\text{visc}")
        # lines!(f*t, Œ∂_err_interpolated, label = L"\zeta_\text{err}")
        lines!(f*t, F_Œ∂_hor_interpolated, label = L"F_{\zeta,\text{hor}}")
        lines!(f*t, Œ∂_h_adv_interpolated, label = L"\zeta_\text{adv}")
        # lines!(f*t, F_Œ∂_vrt_interpolated, label = L"F_{\zeta,\text{vrt}}")
        lines!(f*t, Œ∂_tendency_interpolated + Œ∂_adv_interpolated + Œ∂_err_interpolated - (
            F_Œ∂_cor_interpolated + Œ∂_visc_interpolated + F_Œ∂_hor_interpolated + F_Œ∂_vrt_interpolated),
            label = "residual")
    end
    ylims!(ax, -lim, lim)
    axislegend(position=:lb)
    display(fig)

end

function plot_lagr_Œ∂_balance(label::String, drifter_num::Int64)

    check_pp_dir(label)
    t, tracked_drifter_data = extract_tracked_drifter_data(label)
    num_iters = length(tracked_drifter_data[drifter_num])

    Œ∂_tendency = [tracked_drifter_data[drifter_num][i].Œ∂_tendency for i = 1 : num_iters]
    Œ∂_adv      = [tracked_drifter_data[drifter_num][i].Œ∂_adv      for i = 1 : num_iters]
    Œ∂_err      = [tracked_drifter_data[drifter_num][i].Œ∂_err      for i = 1 : num_iters]
    F_Œ∂_hor    = [tracked_drifter_data[drifter_num][i].F_Œ∂_hor    for i = 1 : num_iters]
    F_Œ∂_vrt    = [tracked_drifter_data[drifter_num][i].F_Œ∂_vrt    for i = 1 : num_iters]
    F_Œ∂_cor    = [tracked_drifter_data[drifter_num][i].F_Œ∂_cor    for i = 1 : num_iters]
    Œ∂_h_visc   = [tracked_drifter_data[drifter_num][i].Œ∂_h_visc   for i = 1 : num_iters]
    Œ∂_v_visc   = [tracked_drifter_data[drifter_num][i].Œ∂_v_visc   for i = 1 : num_iters]

    fig = Figure()
    ax = Axis(fig[1, 1])
    lim = 5e-7
    lines!(f*t, Œ∂_tendency + Œ∂_adv + Œ∂_err, label = L"\mathrm{D}\zeta/\mathrm{D}t")
    lines!(f*t, F_Œ∂_hor,  label = L"F_{\zeta,\text{hor}}")
    lines!(f*t, F_Œ∂_vrt,  label = L"F_{\zeta,\text{vrt}}")
    lines!(f*t, F_Œ∂_cor,  label = L"\zeta_\text{Cor}")
    lines!(f*t, Œ∂_h_visc, label = L"\zeta_\text{visc,h}")
    lines!(f*t, Œ∂_v_visc, label = L"\zeta_\text{visc,v}")
    lines!(f*t, Œ∂_tendency + Œ∂_adv + Œ∂_err - (
        F_Œ∂_cor + Œ∂_v_visc + Œ∂_h_visc + F_Œ∂_hor + F_Œ∂_vrt),
        label = "residual", color = :black)
    lines!(f*t, Œ∂_err, label = L"\zeta_{\text{err}}", color = :black, linestyle = :dot)
    lim = maximum([maximum(abs.(Œ∂_h_visc)), maximum(abs.(F_Œ∂_hor))])
    ylims!(ax, -lim, lim)
    axislegend(position=:lb)
    display(fig)

end

function plot_lagr_Œ¥_balance(label::String, drifter_num::Int64)

    check_pp_dir(label)
    t, tracked_drifter_data = extract_tracked_drifter_data(label)
    num_iters = length(tracked_drifter_data[drifter_num])

    Œ¥_tendency = [tracked_drifter_data[drifter_num][i].Œ¥_tendency for i = 1 : num_iters]
    Œ¥_adv      = [tracked_drifter_data[drifter_num][i].Œ¥_adv      for i = 1 : num_iters]
    Œ¥_err      = [tracked_drifter_data[drifter_num][i].Œ¥_err      for i = 1 : num_iters]
    F_Œ¥_hor    = [tracked_drifter_data[drifter_num][i].F_Œ¥_hor    for i = 1 : num_iters]
    F_Œ¥_vrt    = [tracked_drifter_data[drifter_num][i].F_Œ¥_vrt    for i = 1 : num_iters]
    F_Œ¥_cor    = [tracked_drifter_data[drifter_num][i].F_Œ¥_cor    for i = 1 : num_iters]
    F_Œ¥_prs    = [tracked_drifter_data[drifter_num][i].F_Œ¥_prs    for i = 1 : num_iters]
    Œ¥_h_visc   = [tracked_drifter_data[drifter_num][i].Œ¥_h_visc   for i = 1 : num_iters]
    Œ¥_v_visc   = [tracked_drifter_data[drifter_num][i].Œ¥_v_visc   for i = 1 : num_iters]

    fig = Figure()
    ax = Axis(fig[1, 1])
    lim = 5e-7
    lines!(f*t, Œ¥_tendency + Œ¥_adv + Œ¥_err, label = L"\mathrm{D}\delta/\mathrm{D}t")
    lines!(f*t, F_Œ¥_hor,  label = L"F_{\delta,\text{hor}}")
    lines!(f*t, F_Œ¥_vrt,  label = L"F_{\delta,\text{vrt}}")
    lines!(f*t, F_Œ¥_cor,  label = L"\delta_\text{Cor}")
    lines!(f*t, Œ¥_h_visc, label = L"\delta_\text{visc,h}")
    lines!(f*t, Œ¥_v_visc, label = L"\delta_\text{visc,v}")
    lines!(f*t, F_Œ¥_prs,  label = L"F_{\delta,\text{prs}}")
    lines!(f*t, Œ¥_tendency + Œ¥_adv + Œ¥_err - (
        F_Œ¥_cor + Œ¥_v_visc + Œ¥_h_visc + F_Œ¥_hor + F_Œ¥_vrt + F_Œ¥_prs),
        label = "residual", color = :black)
    lines!(f*t, Œ¥_err, label = L"\delta_{\text{err}}", color = :black, linestyle = :dot)
    lim = maximum([maximum(abs.(Œ¥_h_visc)), maximum(abs.(F_Œ¥_hor))])
    ylims!(ax, -lim, lim)
    axislegend(position=:lb)
    display(fig)

end

investigate_lagr_Œ∂_balance(label::String) = investigate_lagr_Œ∂_balance(label, 1)

function investigate_lagr_Œ∂_balance2(label::String, drifter_num::Int64)
    
    # This compares d/dt(Œ∂(ùê±(t))) and Œ∂‚Çú + ùêÆ‚ãÖ‚àáŒ∂

    check_pp_dir(label)
    eul_data = topdata(label)
    t, tracked_drifter_data = extract_tracked_drifter_data(label)
    num_iters = length(tracked_drifter_data[drifter_num])
    iterations = eul_data.iterations

    grid_pos = (Face(), Face())

    x = [tracked_drifter_data[drifter_num][i].x for i = 1 : num_iters]
    y = [tracked_drifter_data[drifter_num][i].y for i = 1 : num_iters]
    Œ∂_tracked = [tracked_drifter_data[drifter_num][i].Œ∂ for i = 1 : num_iters]
    Œ∂_tendency_tracked = [tracked_drifter_data[drifter_num][i].Œ∂_tendency for i = 1 : num_iters]
    Œ∂_visc_tracked = [tracked_drifter_data[drifter_num][i].Œ∂_visc for i = 1 : num_iters]
    Œ∂_err_tracked = [tracked_drifter_data[drifter_num][i].Œ∂_err for i = 1 : num_iters]
    F_Œ∂_hor_tracked = [tracked_drifter_data[drifter_num][i].F_Œ∂_hor for i = 1 : num_iters]
    Œ∂_adv_tracked = [tracked_drifter_data[drifter_num][i].Œ∂_adv for i = 1 : num_iters]
    Œ∂_h_adv_tracked = [tracked_drifter_data[drifter_num][i].Œ∂_h_adv for i = 1 : num_iters]

    D‚ÇúŒ∂ = Œ∂_tendency_tracked + Œ∂_h_adv_tracked + Œ∂_err_tracked
    ‚à´D‚ÇúŒ∂ = [sum([(D‚ÇúŒ∂[j]+D‚ÇúŒ∂[j+1])/2 * (t[j+1]-t[j]) for j = 1 : i]) for i = 1 : length(t)-1]
    Œ∂ = (Œ∂_tracked[1:end-1] + Œ∂_tracked[2:end]) / 2
    tÃÖ = (t[1:end-1] + t[2:end]) / 2

    fig = Figure()
    ax = Axis(fig[1, 1])
    lines!(f*tÃÖ, Œ∂)
    lines!(f*tÃÖ, ‚à´D‚ÇúŒ∂)
    lines!(f*tÃÖ, ‚à´D‚ÇúŒ∂-Œ∂)
    lim = maximum([maximum(abs.(‚à´D‚ÇúŒ∂)), maximum(abs.(Œ∂_tracked))])
    ylims!(ax, -lim, lim)
    display(fig)

end

function isRoughly(x::Float64, y::Float64) :: Bool

    return x * y > 0 && abs(y)/1.5 < abs(x) < 1.5abs(y)

end

function investigate_exceptional_times(drifter_num::Int64)

    eul_data = topdata(label)
    t, tracked_drifter_data = extract_tracked_drifter_data(label)
    num_iters = length(tracked_drifter_data[drifter_num])
    iterations = eul_data.iterations

    x = [tracked_drifter_data[drifter_num][i].x for i = 1 : num_iters]
    y = [tracked_drifter_data[drifter_num][i].y for i = 1 : num_iters]
    Œ∂_tracked = [tracked_drifter_data[drifter_num][i].Œ∂ for i = 1 : num_iters]
    Œ∂_tendency_tracked = [tracked_drifter_data[drifter_num][i].Œ∂_tendency for i = 1 : num_iters]
    Œ∂_cor_tracked = [tracked_drifter_data[drifter_num][i].Œ∂_cor for i = 1 : num_iters]
    Œ∂_visc_tracked = [tracked_drifter_data[drifter_num][i].Œ∂_visc for i = 1 : num_iters]
    Œ∂_err_tracked = [tracked_drifter_data[drifter_num][i].Œ∂_err for i = 1 : num_iters]
    F_Œ∂_hor_tracked = [tracked_drifter_data[drifter_num][i].F_Œ∂_hor for i = 1 : num_iters]
    F_Œ∂_vrt_tracked = [tracked_drifter_data[drifter_num][i].F_Œ∂_vrt for i = 1 : num_iters]
    Œ∂_adv_tracked = [tracked_drifter_data[drifter_num][i].Œ∂_adv for i = 1 : num_iters]

    for i = 2 : num_iters - 1
        if !isRoughly(Œ∂_visc_tracked[i-1], Œ∂_visc_tracked[i]) &&
                !isRoughly(Œ∂_visc_tracked[i], Œ∂_visc_tracked[i+1]) &&
                20 < f*t[i] < 30
            for j = i - 1 : i + 1
                @info j, f*t[j]
            end
            println("")
        end
    end

end