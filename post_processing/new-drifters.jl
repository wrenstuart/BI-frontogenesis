using CairoMakie
using Oceananigans
using JLD2
using Printf
using Colors
using Statistics

include("tracers.jl")

Œ¥_mult = 1
other_mult = 1
ŒΩ‚Çï = 1e+1
ŒΩ·µ• = 1e-3

function rearrange_data(label)
    in_name = "raw_data/" * label * "_particles.jld2"
    out_name = "raw_data/" * label * "_particles-rearranged.jld2"
    if ~isfile(in_name)
        throw("Could not find drifter data associated with label \'" * label * "\'")
    end
    in_file = jldopen(in_name)
    iterations = parse.(Int, keys(in_file["timeseries/t"]))
    t = [in_file["timeseries/t/$iter"] for iter in iterations]
    raw_keys = keys(in_file["timeseries/particles/0"])
    N = length(in_file["timeseries/particles/0"].x)
        # Number of particles
    p_data = in_file["timeseries/particles"]
    drifters = [[(; (raw_keys .=> [p_data["$iter"][var][n] for var in raw_keys])...) for iter in iterations] for n = 1 : N]
    @save out_name t drifters
end

function drifter_keys(label)
    filename = "raw_data/" * label * "_particles.jld2"
    file = jldopen(filename)
    return keys(file["timeseries/particles/0"])
end

function get_drifter_data(label)
    filename = "raw_data/" * label * "_particles-rearranged.jld2"
    if ~isfile(filename)
        @info "Rearranging output data..."
        rearrange_data(label)
    end
    file = jldopen(filename)
    t = file["t"]
    drifters = file["drifters"]
    return t, drifters
end

label = "testlongreal"
t, drifters = get_drifter_data(label)

f = 1e-4

# In the following functions, d is the data associated
# with a single particle at a given iteration
u_y(d) = d.v_x - d.Œ∂
v_y(d) = d.Œ¥ - d.u_x
‚àá‚Çïb(d) = (d.b_x^2 + d.b_y^2) ^ 0.5
F_hor_Œ∂(d) = -d.Œ¥ * d.Œ∂
F_vrt_Œ∂(d) = d.w_y * d.u_z - d.w_x * d.v_z
F_Cor_Œ∂(d) = -f * d.Œ¥
H_mix_Œ∂(d) = ŒΩ‚Çï * d.‚àá‚Çï¬≤Œ∂
V_mix_Œ∂(d) = ŒΩ·µ• * d.Œ∂_zz

F_hor_Œ¥(d) = -(d.u_x ^ 2 + 2 * d.v_x * u_y(d) + v_y(d) ^ 2)
F_vrt_Œ¥(d) = -(d.w_x * d.u_z + d.w_y * d.v_z)
F_Cor_Œ¥(d) = f * d.Œ∂
F_prs_Œ¥(d) = -d.fŒ∂_g
H_mix_Œ¥(d) = ŒΩ‚Çï * d.‚àá‚Çï¬≤Œ¥
V_mix_Œ¥(d) = ŒΩ·µ• * d.Œ¥_zz

‚àá‚ÇïùêÆ‚Çï(d) = (d.u_x ^ 2 + d.v_x ^ 2 + u_y(d) ^ 2 + v_y(d) ^ 2) ^ 0.5
Œ∂_on_f(d) = d.Œ∂ / f
Œ¥_on_f(d) = d.Œ¥ / f

function get_sections(drifter)
    abs_‚àá‚ÇïùêÆ‚Çï = ‚àá‚ÇïùêÆ‚Çï.(drifter)
    sections = []
    run_start = 2
    for i = 2 : length(t)-1
        if abs_‚àá‚ÇïùêÆ‚Çï[i] > 5f
            if run_start == i
                push!(sections, [])
            end
            push!(sections[end], i)
        else
            run_start = i+1
        end
    end
    return sections
end

function Œ∂_Œ¥_trajectories(drifter)
    # Finds segements of a drifter's trajectory through Œ∂‚ÄìŒ¥ phase space that are high in ‚àáùêÆ and
    # return an array of each trajectory, where each trajectory is a named tuple with keys Œ∂, Œ¥ and t_rel
    # t_rel is a normalised time relative to the time of maximal Œ∂

    Œ∂_f = Œ∂_on_f.(drifter)
    Œ¥_f = Œ¥_on_f.(drifter)
    sections = get_sections(drifter)

    #=if length(sections) > 0

        s = sections[1]
        t‚ÇÄ = t[argmax(abs.(Œ∂_f[s])) + s[1] - 1]
        if f*t‚ÇÄ < 20 && length(sections) > 1
            s = sections[2]
            t‚ÇÄ = t[argmax(abs.(Œ∂_f[s])) + s[1] - 1]
        end
        T = minimum([t[s[end]] - t‚ÇÄ, t‚ÇÄ - t[s[1]]])
        t_rel = (t[s].-t‚ÇÄ)/T
        
        fig = Figure()
        ax = Axis(fig[1, 1], xlabel = L"\zeta/f", ylabel = L"\delta/f")
        lines!(ax, Œ∂_f[s], Œ¥_f[s], color = t_rel, colormap = :coolwarm, colorrange = (-1.0,1.0))

        #fig = Figure()
        #ax = Axis(fig[1, 1], xlabel = L"ft")
        #lines!(ax, f*t[s], Œ¥[s])
        #lines!(ax, f*t[s], Œ∂[s])

        display(fig)

    end=#

    trajectories = []
    for s in sections
        t‚ÇÄ = t[argmax(abs.(Œ∂_f[s])) + s[1] - 1]
        if f*t‚ÇÄ < 20 && length(sections) > 1
            s = sections[2]
            t‚ÇÄ = t[argmax(abs.(Œ∂_f[s])) + s[1] - 1]
        end
        T = minimum([t[s[end]] - t‚ÇÄ, t‚ÇÄ - t[s[1]]])
        t_rel = (t[s].-t‚ÇÄ)/T
        push!(trajectories, (Œ∂ = Œ∂_f[s], Œ¥ = Œ¥_f[s], t_rel = t_rel))
    end

    return trajectories

end

function ()
    
end

function Œ∂_Œ¥_arrow_map(drifters, Œ∂_grid = -2:0.5:20, Œ¥_grid = -10:0.5:5)#Œ∂_grid = -5:0.5:49, Œ¥_grid = -49:0.5:5)

    n_Œ∂ = length(Œ∂_grid)
    n_Œ¥ = length(Œ¥_grid)
    Œ∂‚ÇÅ = Œ∂_grid[1]
    Œ∂‚Çô = Œ∂_grid[end]
    Œ¥‚ÇÅ = Œ¥_grid[1]
    Œ¥‚Çô = Œ¥_grid[end]
    Œ∂_lims = (2Œ∂‚ÇÅ-Œ∂_grid[2], 2Œ∂‚Çô-Œ∂_grid[end-1])
    Œ¥_lims = (2Œ¥‚ÇÅ-Œ¥_grid[2], 2Œ¥‚Çô-Œ¥_grid[end-1])

    total_sections_count = 0
    visited_count_total = zeros((n_Œ∂, n_Œ¥))
    time_count_total = zeros((n_Œ∂, n_Œ¥))
    D‚ÇúŒ∂_total = zeros((n_Œ∂, n_Œ¥))
    D‚ÇúŒ¥_total = zeros((n_Œ∂, n_Œ¥))

    for drifter in drifters

        #for sec in get_sections(drifter)
        for sec in [2 : length(t)-1]

            total_sections_count += 1
            visited_count = zeros(Int64, (n_Œ∂, n_Œ¥))
            Œ∂_f = Œ∂_on_f.(drifter[sec])
            Œ¥_f = Œ¥_on_f.(drifter[sec])
            D‚ÇúŒ∂_f = (Œ∂_on_f.(drifter[sec.+1]) - Œ∂_on_f.(drifter[sec.-1])) ./ (t[sec.+1] - t[sec.-1])
            D‚ÇúŒ¥_f = (Œ¥_on_f.(drifter[sec.+1]) - Œ¥_on_f.(drifter[sec.-1])) ./ (t[sec.+1] - t[sec.-1])
            for (j, Œ∂) in enumerate(Œ∂_f)
                Œ¥ = Œ¥_f[j]
                if Œ∂_lims[1] < Œ∂ && Œ∂ < Œ∂_lims[2] && Œ¥_lims[1] < Œ¥ && Œ¥ < Œ¥_lims[2]
                    i‚ÇÅ = argmin(abs.(Œ∂ .- Œ∂_grid))
                    i‚ÇÇ = argmin(abs.(Œ¥ .- Œ¥_grid))
                    visited_count[i‚ÇÅ, i‚ÇÇ] |= 1
                    time_count_total[i‚ÇÅ, i‚ÇÇ] += 1
                    D‚ÇúŒ∂_total[i‚ÇÅ, i‚ÇÇ] += D‚ÇúŒ∂_f[j]
                    D‚ÇúŒ¥_total[i‚ÇÅ, i‚ÇÇ] += D‚ÇúŒ¥_f[j]
                end
            end
            visited_count_total += visited_count

        end

    end

    avg_weight = [n == 0 ? 0 : 1/n for n in time_count_total]
    D‚ÇúŒ∂ÃÖ = D‚ÇúŒ∂_total .* avg_weight# * [n > 10 ? 1 : 0 for n in visited_count_total]
    D‚ÇúŒ¥ÃÖ = D‚ÇúŒ¥_total .* avg_weight# * [n > 10 ? 1 : 0 for n in visited_count_total]
    #arrows(Œ∂_grid, Œ¥_grid, D‚ÇúŒ∂ÃÖ, D‚ÇúŒ¥ÃÖ, lengthscale = 0.1)
    mags = (D‚ÇúŒ∂ÃÖ.^2 + D‚ÇúŒ¥ÃÖ.^2) .^ 0.5
    mags = [x == 0 ? 1 : x for x in mags]
    #arrows(Œ∂_grid, Œ¥_grid, D‚ÇúŒ∂ÃÖ, D‚ÇúŒ¥ÃÖ, lengthscale = 100)

    mags = (D‚ÇúŒ∂_total.^2 + D‚ÇúŒ¥_total.^2) .^ 0.5
    u = D‚ÇúŒ∂_total./mags
    v = D‚ÇúŒ¥_total./mags
    u .*= mags.^0.2
    v .*= mags.^0.2
    #alpha = log.(1 .+ visited_count_total)
    alpha = visited_count_total#.^0.5
    colors = [RGBA(0, 0, 0, Œ±/maximum(alpha)) for Œ± in alpha]
    arrows(Œ∂_grid, Œ¥_grid, u, v,
           lengthscale = 0.35, color = vec(colors), lengths = mags)

end

function lagr_Œ∂_balance(drifter)
    sections = get_sections(drifter)
    for s in sections
        if length(s) > 1
            plot_Œ∂_balance(drifter, s)
        end
    end
end

function lagr_Œ¥_balance(drifter)
    sections = get_sections(drifter)
    for s in sections
        if length(s) > 1
            plot_Œ¥_balance(drifter, s)
        end
    end
end

function Œ∂_Œ¥(drifter)
    sections = get_sections(drifter)
    for s in sections
        if length(s) > 1
            Œ∂_Œ¥(drifter, s)
        end
    end
end

function smooth_timeseries(x)
    if length(x) < 5
        return x
    else
        return [mean(x[i-2:i+2]) for i = 3:length(x)-2]
    end
end

function plot_Œ∂_balance(drifter, section)
    s = section
    Œît = t[s[2]] - t[s[1]]
    ft = f * t[s]
    D‚ÇúŒ∂ = [(drifter[i+1].Œ∂ - drifter[i-1].Œ∂) / (2Œît) for i in s]*other_mult
    fig = Figure()
    ax = Axis(fig[1, 1])
    #ylims!(ax, (-2e-7, 2e-7))
    F_hor = F_hor_Œ∂.(drifter[s])*Œ¥_mult*other_mult
    F_vrt = 0 * F_hor_Œ∂.(drifter[s])          # Due to no-penetration condition
    F_Cor = F_Cor_Œ∂.(drifter[s])*Œ¥_mult
    H_mix = H_mix_Œ∂.(drifter[s])*other_mult
    V_mix = V_mix_Œ∂.(drifter[s])*other_mult
    if length(ft) > 5
        ft = ft[3:end-2]
        D‚ÇúŒ∂ = smooth_timeseries(D‚ÇúŒ∂)
        F_hor = smooth_timeseries(F_hor)
        F_Cor = smooth_timeseries(F_Cor)
        H_mix = smooth_timeseries(H_mix)
        V_mix = smooth_timeseries(V_mix)
    end
    lines!(ax, ft, F_hor, label = "horizontal")
    lines!(ax, ft, F_Cor, label = "Coriolis")
    lines!(ax, ft, H_mix, label = "hor. mixing")
    lines!(ax, ft, V_mix, label = "vert. mixing")
    lines!(ax, ft, D‚ÇúŒ∂ - (F_hor + F_Cor + H_mix + V_mix), label = "discrepancy", color = :black, linestyle = :dot)
    lines!(ax, ft, D‚ÇúŒ∂, label = L"D\zeta/Dt", color = :black)
    axislegend()
    display(fig)
end


function Œ∂_Œ¥(drifter, section)
    s = section
    Œît = t[s[2]] - t[s[1]]
    ft = f * t[s]
    D‚ÇúŒ∂ = [(drifter[i+1].Œ∂ - drifter[i-1].Œ∂) / (2Œît) for i in s]*other_mult
    fig = Figure()
    ax = Axis(fig[1, 1])
    #ylims!(ax, (-2e-7, 2e-7))
    Œ∂ = Œ∂_on_f.(drifter[s])
    Œ¥ = Œ¥_on_f.(drifter[s])
    Œ∂_g = -F_prs_Œ¥.(drifter[s])/f
    if length(ft) > 5
        ft = ft[3:end-2]
        Œ∂ = smooth_timeseries(Œ∂)
        Œ¥ = smooth_timeseries(Œ¥)
        Œ∂_g = smooth_timeseries(Œ∂_g)
    end
    lines!(ax, ft, Œ∂, label = "zeta")
    lines!(ax, ft, Œ¥, label = "delta")
    lines!(ax, ft, 1000Œ∂_g, label = "zeta_g")
    axislegend()
    display(fig)
end

#=function investigate(drifter)

    ft = f*t
    fig = Figure()
    ax = Axis(fig[1, 1], limits = ((10, 30), (-0.0005, 0.0005)))
    Œ¥_app = [d.Œ¥ for d in drifter]
    Œ∂_zz_app = [d.Œ∂_zz for d in drifter]
    Œ∂ = [d.Œ∂ for d in drifter]
    Œ∂_zz_true = 2*(Œ∂_zz_app+0.5*Œ∂/Œîz^2)
    x = [d.y for d in drifter]

    # now for the interpolation bit

    data = topdata(label)
    drifter = extract_tracers(label)[1]
    new_t, new_Œ¥ = lagr_track_new(label, data, "Œ¥", drifter)

    lines!(ax, ft, Œ¥_app)
    lines!(ax, f*new_t, 0.5*new_Œ¥)
    display(fig)

end=#

function plot_Œ¥_balance(drifter, section)
    s = section
    Œît = t[s[2]] - t[s[1]]
    ft = f * t[s]
    D‚ÇúŒ¥ = [(drifter[i+1].Œ¥ - drifter[i-1].Œ¥) / (2Œît) for i in s]*Œ¥_mult
    fig = Figure()
    ax = Axis(fig[1, 1])
    F_hor = F_hor_Œ¥.(drifter[s])*Œ¥_mult^2
    F_Cor = F_Cor_Œ¥.(drifter[s])*other_mult
    F_prs = F_prs_Œ¥.(drifter[s])*other_mult
    H_mix = H_mix_Œ¥.(drifter[s])*Œ¥_mult
    V_mix = V_mix_Œ¥.(drifter[s])*Œ¥_mult
    if length(ft) > 5
        ft = ft[3:end-2]
        D‚ÇúŒ¥ = smooth_timeseries(D‚ÇúŒ¥)
        F_hor = smooth_timeseries(F_hor)
        F_Cor = smooth_timeseries(F_Cor)
        F_prs = smooth_timeseries(F_prs)
        H_mix = smooth_timeseries(H_mix)
        V_mix = smooth_timeseries(V_mix)
    end
    lines!(ax, ft, F_hor, label = "horizontal")
    lines!(ax, ft, F_Cor, label = "Coriolis")
    lines!(ax, ft, F_prs, label = "pressure")
    lines!(ax, ft, H_mix, label = "hor. mixing")
    lines!(ax, ft, V_mix, label = "vert. mixing")
    lines!(ax, ft, D‚ÇúŒ¥ - (F_hor + F_Cor + H_mix + V_mix + F_prs), label = "discrepancy", color = :black, linestyle = :dot)
    lines!(ax, ft, D‚ÇúŒ¥, label = L"D\delta/Dt", color = :black)
    axislegend(position = :lb)
    display(fig)
end

Œ∂_Œ¥_arrow_map(drifters)