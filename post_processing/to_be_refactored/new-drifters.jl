using CairoMakie
using Oceananigans
using Oceananigans.Units
using JLD2
using Printf
using Colors
using Statistics

include("tracers.jl")

Œ¥_mult = 1
other_mult = 1
ŒΩ‚Çï = 1e+1
ŒΩ·µ• = 1e-3

function rearrange_data(label)
    in_name = "raw_data/" * label * "_particles.jld2"
    out_name = "raw_data/" * label * "_particles-rearranged.jld2"
    if ~isfile(in_name)
        throw("Could not find drifter data associated with label \'" * label * "\'")
    end
    in_file = jldopen(in_name)
    iterations = parse.(Int, keys(in_file["timeseries/t"]))
    t = [in_file["timeseries/t/$iter"] for iter in iterations]
    raw_keys = keys(in_file["timeseries/particles/0"])
    N = length(in_file["timeseries/particles/0"].x)
        # Number of particles
    p_data = in_file["timeseries/particles"]
    drifters = [[(; (raw_keys .=> [p_data["$iter"][var][n] for var in raw_keys])...) for iter in iterations] for n = 1 : N]
    @save out_name t drifters
end

function get_drifter_data(label)
    filename = "raw_data/" * label * "_particles-rearranged.jld2"
    if ~isfile(filename)
        @info "Rearranging output data..."
        rearrange_data(label)
    end
    file = jldopen(filename)
    t = file["t"]
    drifters = file["drifters"]
    return t, drifters
end

##############################
# REFACTOR FROM HERE ONWARDS #
##############################

label = "test_extra_visc"
t, drifters = get_drifter_data(label)

f = 1e-4

# In the following functions, d is the data associated
# with a single particle at a given iteration
u_y(d) = d.v_x - d.Œ∂
v_y(d) = d.Œ¥ - d.u_x
‚àá‚Çïb(d) = (d.b_x^2 + d.b_y^2) ^ 0.5
F_hor_Œ∂(d) = d.F_Œ∂_hor#-d.Œ¥ * d.Œ∂
F_vrt_Œ∂(d) = d.F_Œ∂_vrt#d.w_y * d.u_z - d.w_x * d.v_z
F_Cor_Œ∂(d) = d.Œ∂_cor#-f * d.Œ¥
H_mix_Œ∂(d) = d.Œ∂_visc#ŒΩ‚Çï * d.‚àá‚Çï¬≤Œ∂
V_mix_Œ∂(d) = 0#ŒΩ·µ• * d.Œ∂_zz
Œ∂_err_func(d) = d.Œ∂_err
vert_adv_Œ∂(d) = 0#-d.w * d.Œ∂_z
Œ∂_adv_func(d) = d.Œ∂_adv
Œ∂_tendency_func(d) = d.Œ∂_tendency
Œ∂_visc_func(d) = d.Œ∂_visc

F_hor_Œ¥(d) = 0#-(d.u_x ^ 2 + 2 * d.v_x * u_y(d) + v_y(d) ^ 2)
F_vrt_Œ¥(d) = 0#-(d.w_x * d.u_z + d.w_y * d.v_z)
F_Cor_Œ¥(d) = 0#f * d.Œ∂
F_prs_Œ¥(d) = 0#-d.fŒ∂_g
H_mix_Œ¥(d) = 0#ŒΩ‚Çï * d.‚àá‚Çï¬≤Œ¥
V_mix_Œ¥(d) = 0#ŒΩ·µ• * d.Œ¥_zz

‚àá‚ÇïùêÆ‚Çï(d) = (d.u_x ^ 2 + d.v_x ^ 2 + u_y(d) ^ 2 + v_y(d) ^ 2) ^ 0.5
Œ∂_on_f(d) = d.Œ∂ / f
Œ¥_on_f(d) = d.Œ¥ / f

function get_sections(drifter)
    abs_‚àá‚ÇïùêÆ‚Çï = ‚àá‚ÇïùêÆ‚Çï.(drifter)
    sections = []
    run_start = 2
    for i = 2 : length(t)-1
        if abs_‚àá‚ÇïùêÆ‚Çï[i] > 5f
            if run_start == i
                push!(sections, [])
            end
            push!(sections[end], i)
        else
            run_start = i+1
        end
    end
    return sections
end

function Œ∂_Œ¥_trajectories(drifter)
    # Finds segements of a drifter's trajectory through Œ∂‚ÄìŒ¥ phase space that are high in ‚àáùêÆ and
    # return an array of each trajectory, where each trajectory is a named tuple with keys Œ∂, Œ¥ and t_rel
    # t_rel is a normalised time relative to the time of maximal Œ∂

    Œ∂_f = Œ∂_on_f.(drifter)
    Œ¥_f = Œ¥_on_f.(drifter)
    sections = get_sections(drifter)

    #=if length(sections) > 0

        s = sections[1]
        t‚ÇÄ = t[argmax(abs.(Œ∂_f[s])) + s[1] - 1]
        if f*t‚ÇÄ < 20 && length(sections) > 1
            s = sections[2]
            t‚ÇÄ = t[argmax(abs.(Œ∂_f[s])) + s[1] - 1]
        end
        T = minimum([t[s[end]] - t‚ÇÄ, t‚ÇÄ - t[s[1]]])
        t_rel = (t[s].-t‚ÇÄ)/T
        
        fig = Figure()
        ax = Axis(fig[1, 1], xlabel = L"\zeta/f", ylabel = L"\delta/f")
        lines!(ax, Œ∂_f[s], Œ¥_f[s], color = t_rel, colormap = :coolwarm, colorrange = (-1.0,1.0))

        #fig = Figure()
        #ax = Axis(fig[1, 1], xlabel = L"ft")
        #lines!(ax, f*t[s], Œ¥[s])
        #lines!(ax, f*t[s], Œ∂[s])

        display(fig)

    end=#

    trajectories = []
    for s in sections
        t‚ÇÄ = t[argmax(abs.(Œ∂_f[s])) + s[1] - 1]
        if f*t‚ÇÄ < 20 && length(sections) > 1
            s = sections[2]
            t‚ÇÄ = t[argmax(abs.(Œ∂_f[s])) + s[1] - 1]
        end
        T = minimum([t[s[end]] - t‚ÇÄ, t‚ÇÄ - t[s[1]]])
        t_rel = (t[s].-t‚ÇÄ)/T
        push!(trajectories, (Œ∂ = Œ∂_f[s], Œ¥ = Œ¥_f[s], t_rel = t_rel))
    end

    return trajectories

end

function Œ∂_Œ¥_arrow_map(drifters, Œ∂_grid = -2:0.5:20, Œ¥_grid = -10:0.5:5)#Œ∂_grid = -5:0.5:49, Œ¥_grid = -49:0.5:5)

    n_Œ∂ = length(Œ∂_grid)
    n_Œ¥ = length(Œ¥_grid)
    Œ∂‚ÇÅ = Œ∂_grid[1]
    Œ∂‚Çô = Œ∂_grid[end]
    Œ¥‚ÇÅ = Œ¥_grid[1]
    Œ¥‚Çô = Œ¥_grid[end]
    Œ∂_lims = (2Œ∂‚ÇÅ-Œ∂_grid[2], 2Œ∂‚Çô-Œ∂_grid[end-1])
    Œ¥_lims = (2Œ¥‚ÇÅ-Œ¥_grid[2], 2Œ¥‚Çô-Œ¥_grid[end-1])

    total_sections_count = 0
    visited_count_total = zeros((n_Œ∂, n_Œ¥))
    time_count_total = zeros((n_Œ∂, n_Œ¥))
    D‚ÇúŒ∂_total = zeros((n_Œ∂, n_Œ¥))
    D‚ÇúŒ¥_total = zeros((n_Œ∂, n_Œ¥))

    for drifter in drifters

        #for sec in get_sections(drifter)
        for sec in [2 : length(t)-1]

            total_sections_count += 1
            visited_count = zeros(Int64, (n_Œ∂, n_Œ¥))
            Œ∂_f = Œ∂_on_f.(drifter[sec])
            Œ¥_f = Œ¥_on_f.(drifter[sec])
            D‚ÇúŒ∂_f = (Œ∂_on_f.(drifter[sec.+1]) - Œ∂_on_f.(drifter[sec.-1])) ./ (t[sec.+1] - t[sec.-1])
            D‚ÇúŒ¥_f = (Œ¥_on_f.(drifter[sec.+1]) - Œ¥_on_f.(drifter[sec.-1])) ./ (t[sec.+1] - t[sec.-1])
            for (j, Œ∂) in enumerate(Œ∂_f)
                Œ¥ = Œ¥_f[j]
                if Œ∂_lims[1] < Œ∂ && Œ∂ < Œ∂_lims[2] && Œ¥_lims[1] < Œ¥ && Œ¥ < Œ¥_lims[2]
                    i‚ÇÅ = argmin(abs.(Œ∂ .- Œ∂_grid))
                    i‚ÇÇ = argmin(abs.(Œ¥ .- Œ¥_grid))
                    visited_count[i‚ÇÅ, i‚ÇÇ] |= 1
                    time_count_total[i‚ÇÅ, i‚ÇÇ] += 1
                    D‚ÇúŒ∂_total[i‚ÇÅ, i‚ÇÇ] += D‚ÇúŒ∂_f[j]
                    D‚ÇúŒ¥_total[i‚ÇÅ, i‚ÇÇ] += D‚ÇúŒ¥_f[j]
                end
            end
            visited_count_total += visited_count

        end

    end

    avg_weight = [n == 0 ? 0 : 1/n for n in time_count_total]
    D‚ÇúŒ∂ÃÖ = D‚ÇúŒ∂_total .* avg_weight# * [n > 10 ? 1 : 0 for n in visited_count_total]
    D‚ÇúŒ¥ÃÖ = D‚ÇúŒ¥_total .* avg_weight# * [n > 10 ? 1 : 0 for n in visited_count_total]
    #arrows(Œ∂_grid, Œ¥_grid, D‚ÇúŒ∂ÃÖ, D‚ÇúŒ¥ÃÖ, lengthscale = 0.1)
    mags = (D‚ÇúŒ∂ÃÖ.^2 + D‚ÇúŒ¥ÃÖ.^2) .^ 0.5
    mags = [x == 0 ? 1 : x for x in mags]
    #arrows(Œ∂_grid, Œ¥_grid, D‚ÇúŒ∂ÃÖ, D‚ÇúŒ¥ÃÖ, lengthscale = 100)

    mags = (D‚ÇúŒ∂_total.^2 + D‚ÇúŒ¥_total.^2) .^ 0.5
    u = D‚ÇúŒ∂_total./mags
    v = D‚ÇúŒ¥_total./mags
    u .*= mags.^0.2
    v .*= mags.^0.2
    #alpha = log.(1 .+ visited_count_total)
    alpha = visited_count_total#.^0.5
    colors = [RGBA(0, 0, 0, Œ±/maximum(alpha)) for Œ± in alpha]
    arrows(Œ∂_grid, Œ¥_grid, u, v,
           lengthscale = 0.35, color = vec(colors), lengths = mags)

end

function lagr_Œ∂_balance(drifter)
    sections = get_sections(drifter)
    for s in sections
        if length(s) > 1
            plot_Œ∂_balance(drifter, s)
        end
    end
end

function lagr_Œ¥_balance(drifter)
    sections = get_sections(drifter)
    for s in sections
        if length(s) > 1
            plot_Œ¥_balance(drifter, s)
        end
    end
end

function Œ∂_Œ¥(drifter)
    sections = get_sections(drifter)
    for s in sections
        if length(s) > 1
            Œ∂_Œ¥(drifter, s)
        end
    end
end

function smooth_timeseries(x)
    n = 8
    if length(x) < 2n+1
        return x
    else
        return [mean(x[i-n:i+n]) for i = 1+n:length(x)-n]
    end
end

#=function plot_Œ∂_balance(drifter, section)
    s = section
    Œît = t[s[2]] - t[s[1]]
    ft = f * t[s]
    D‚ÇúŒ∂ = [(drifter[i+1].Œ∂ - drifter[i-1].Œ∂) / (2Œît) for i in s]*other_mult
    fig = Figure()
    ax = Axis(fig[1, 1])
    F_hor = F_hor_Œ∂.(drifter[s])
    F_vrt = F_vrt_Œ∂.(drifter[s])
    F_Cor = F_Cor_Œ∂.(drifter[s])
    H_mix = H_mix_Œ∂.(drifter[s])
    V_mix = V_mix_Œ∂.(drifter[s])
    vert_adv = vert_adv_Œ∂.(drifter[s])
    if length(ft) > 5
        ft = ft[3:end-2]
        D‚ÇúŒ∂ = smooth_timeseries(D‚ÇúŒ∂)
        F_hor = smooth_timeseries(F_hor)
        F_vrt = smooth_timeseries(F_vrt)
        F_Cor = smooth_timeseries(F_Cor)
        H_mix = smooth_timeseries(H_mix)
        V_mix = smooth_timeseries(V_mix)
        vert_adv = smooth_timeseries(vert_adv)
    end
    lines!(ax, ft, F_hor, label = "horizontal")
    lines!(ax, ft, F_Cor, label = "Coriolis")
    lines!(ax, ft, H_mix, label = "hor. mixing")
    lines!(ax, ft, V_mix, label = "vert. mixing")
    lines!(ax, ft, vert_adv, label = "vert. adv.")
    lines!(ax, ft, D‚ÇúŒ∂ - (F_hor + F_vrt + F_Cor + H_mix + V_mix + vert_adv), label = "discrepancy", color = :black, linestyle = :dot)
    lines!(ax, ft, D‚ÇúŒ∂, label = L"D\zeta/Dt", color = :black)
    axislegend()
    display(fig)
end=#

function plot_Œ∂_balance_2(drifter_num)

    t, drifters = get_drifter_data(label)
    drifter = drifters[drifter_num]
    s = 2 : length(t)-1

    Œît = [t[i+1] - t[i-1] for i in s] / 2
    ft = f * t[s]
    D‚ÇúŒ∂ = [(drifter[i+1].Œ∂ - drifter[i-1].Œ∂) / (2(t[i+1]-t[i-1])) for i in s]
    
    F_hor = [d.F_Œ∂_hor for d in drifter[s]]
    F_vrt = [d.F_Œ∂_vrt for d in drifter[s]]
    F_Cor = [d.Œ∂_cor for d in drifter[s]]
    Œ∂_err = [d.Œ∂_err for d in drifter[s]]
    Œ∂_visc = [d.Œ∂_visc for d in drifter[s]]
    Œ∂_adv = [d.Œ∂_adv for d in drifter[s]]
    Œ∂_tendency = [d.Œ∂_tendency for d in drifter[s]]
    Œ∂ = [d.Œ∂ for d in drifter[s]]

    ft = ft[3:end-2]
    D‚ÇúŒ∂ = smooth_timeseries(D‚ÇúŒ∂)
    F_hor = smooth_timeseries(F_hor)
    F_vrt = smooth_timeseries(F_vrt)
    F_Cor = smooth_timeseries(F_Cor)
    Œ∂_err = smooth_timeseries(Œ∂_err)
    Œ∂_visc = smooth_timeseries(Œ∂_visc)
    Œ∂_adv = smooth_timeseries(Œ∂_adv)
    Œ∂_tendency = smooth_timeseries(Œ∂_tendency)
    Œ∂ = smooth_timeseries(Œ∂)

    fig = Figure()
    ax = Axis(fig[1, 1])
    lines!(ax, ft, Œ∂_tendency, label = "Œ∂_tendency")
    lines!(ax, ft, -Œ∂_adv - Œ∂_err + F_hor + F_vrt + F_Cor + Œ∂_visc, label = "Œ∂_tendency (mine)")
    lines!(ax, ft, -Œ∂_tendency -Œ∂_adv - Œ∂_err + F_hor + F_vrt + F_Cor + Œ∂_visc, label = "difference")
    #lines!(ax, ft, Œ∂_tendency + Œ∂_adv, label = "Œ∂_tendency + Œ∂_adv")
    #lines!(ax, ft, D‚ÇúŒ∂, label = L"D\zeta/Dt")
    #lines!(ax, ft, f*Œ∂, label = L"\zeta f", linestyle = :dot)
    axislegend()
    display(fig)

end

#############################################
# THE BELOW AND ABOVE REVEAL THE FOLLOWING: #
#############################################
# The Œ∂ balance holds perfectly when looking
# at a single grid-point, but is violated
# when we look at Lagrangian tracking

function plot_Œ∂_balance_2_static(i, j)

    filename_xy_top = "raw_data/" * label * "_BI_xy" * ".jld2"
    file = jldopen(filename_xy_top)
    iterations = parse.(Int, keys(file["timeseries/t"]))
    Œ∂ = [file["timeseries/Œ∂/$iter"][i, j, 1] for iter in iterations]
    
    F_hor = [file["timeseries/F_Œ∂_hor/$iter"][i, j, 1] for iter in iterations]
    F_vrt = [file["timeseries/F_Œ∂_vrt/$iter"][i, j, 1] for iter in iterations]
    F_Cor = [file["timeseries/Œ∂_cor/$iter"][i, j, 1] for iter in iterations]
    Œ∂_err = [file["timeseries/Œ∂_err/$iter"][i, j, 1] for iter in iterations]
    Œ∂_visc = [file["timeseries/Œ∂_visc/$iter"][i, j, 1] for iter in iterations]
    Œ∂_adv = [file["timeseries/Œ∂_adv/$iter"][i, j, 1] for iter in iterations]
    Œ∂_tendency = [file["timeseries/Œ∂_tendency/$iter"][i, j, 1] for iter in iterations]

    # D‚ÇúŒ∂ = smooth_timeseries(D‚ÇúŒ∂)
    F_hor = smooth_timeseries(F_hor)
    F_vrt = smooth_timeseries(F_vrt)
    F_Cor = smooth_timeseries(F_Cor)
    Œ∂_err = smooth_timeseries(Œ∂_err)
    Œ∂_visc = smooth_timeseries(Œ∂_visc)
    Œ∂_adv = smooth_timeseries(Œ∂_adv)
    Œ∂_tendency = smooth_timeseries(Œ∂_tendency)

    fig = Figure()
    ax = Axis(fig[1, 1])
    lines!(ax, iterations[3:end-2], Œ∂_tendency, label = "Œ∂_tendency")
    lines!(ax, iterations[3:end-2], -Œ∂_adv - Œ∂_err + F_hor + F_vrt + F_Cor + Œ∂_visc, label = "Œ∂_tendency (mine)")
    axislegend()
    display(fig)

end

function plot_Œ∂_balance_interp_vs_track(drifter_num)
    # RELIES ON THE fact that the drifter data is
    # output at the same time as the top data

    t_drifter, drifters = get_drifter_data(label)
    drifter = drifters[drifter_num]
    Œ∂‚ÇÅ = [d.F_Œ∂_hor for d in drifter]
    Œ∂‚ÇÅ = [d.Œ∂ for d in drifter][1:2000]

    file_data = topdata(label)
    file = file_data.file
    iterations = parse.(Int, keys(file["timeseries/t"]))[1:2000]
    # Œ∂‚ÇÇ = [file["timeseries/Œ∂/$iter"][i, j, 1] for iter in iterations]
    t_top = [file["timeseries/t/$iter"] for iter in iterations]
    t_drifter = t_drifter[1:2000]
    #s = [argmin(abs.(t_drifter .- t_top[i])) for i in 1:length(iterations)]
    #Œ∂‚ÇÅ = Œ∂‚ÇÅ[s]
    Œ∂‚ÇÇ = [grid_interpolate(file_data, "F_Œ∂_hor", drifter[i].x, drifter[i].y, iterations[i]) for i in eachindex(iterations)]
    Œ∂‚ÇÇ = [grid_interpolate(file_data, "Œ∂", drifter[i].x, drifter[i].y, iterations[i]) for i in eachindex(iterations)]
    xÃÇ = [(drifter[i].x * file_data.Nx/file_data.Lx) % 1 for i in eachindex(iterations)]
    yÃÇ = [(drifter[i].y * file_data.Ny/file_data.Ly) % 1 for i in eachindex(iterations)]

    t_top = smooth_timeseries(t_top)
    t_drifter = smooth_timeseries(t_drifter)
    Œ∂‚ÇÅ = smooth_timeseries(Œ∂‚ÇÅ)
    Œ∂‚ÇÇ = smooth_timeseries(Œ∂‚ÇÇ)

    fig = Figure()
    ax = Axis(fig[1, 1])
    lines!(ax, f*t_drifter, Œ∂‚ÇÅ, label = "Œ∂ (drifter)")
    lines!(ax, f*t_top, Œ∂‚ÇÇ, label = "Œ∂ (top)")
    #lines!(ax, f*t_drifter, 5e-7 * xÃÇ, label = "xÃÇ (drifter)", linestyle = :dot)
    #lines!(ax, f*t_drifter, 5e-7 * yÃÇ, label = "yÃÇ (drifter)", linestyle = :dot)
    display(fig)

end

function naive_advection_at_top(file_data, x, y, i) # i ‚â† iter

    Œ∂ = FieldTimeSeries("raw_data/"*label*"_BI_xy.jld2", "Œ∂")[i]
    u = FieldTimeSeries("raw_data/"*label*"_BI_xy.jld2", "u")[i]
    adv_field = @at (Face, Face, Center) u * ‚àÇx(Œ∂)
    return grid_interpolate(file_data, (i, j) -> adv_field[i, j, 1], x, y, i)
    
end

function plot_Œ∂_balance_3(drifter_num, ftlim‚ÇÅ = nothing, ftlim‚ÇÇ = nothing, legendPos = :lb)
    # RELIES ON THE fact that the drifter data is
    # output at the same time as the top data

    t, drifters = get_drifter_data(label)
    drifter = drifters[drifter_num]
    section = Int64[]
    ftlim‚ÇÅ = isnothing(ftlim‚ÇÅ) ? f * t[2] : maximum([ftlim‚ÇÅ, f * t[2]])
    ftlim‚ÇÇ = isnothing(ftlim‚ÇÇ) ? f * t[end-1] : minimum([ftlim‚ÇÇ, f * t[end-1]])
    for (i, t) in enumerate(t)
        if ftlim‚ÇÅ < f * t < ftlim‚ÇÇ push!(section, i) end
    end

    file_data = topdata(label)
    file = file_data.file
    @info length(t)
    iterations = parse.(Int, keys(file["timeseries/t"]))
    @info length(iterations)
    iterations = iterations[section] # WRONG AND BAD?
    t = t[section]
    F_Œ∂_hor = [grid_interpolate(file_data, "F_Œ∂_hor", drifter[section[i]].x, drifter[section[i]].y, iterations[i]) for i in eachindex(iterations)]
    F_Œ∂_vrt = [grid_interpolate(file_data, "F_Œ∂_vrt", drifter[section[i]].x, drifter[section[i]].y, iterations[i]) for i in eachindex(iterations)]
    Œ∂_tendency = [grid_interpolate(file_data, "Œ∂_tendency", drifter[section[i]].x, drifter[section[i]].y, iterations[i]) for i in eachindex(iterations)]
    Œ∂_adv = [grid_interpolate(file_data, "Œ∂_adv", drifter[section[i]].x, drifter[section[i]].y, iterations[i]) for i in eachindex(iterations)]
    Œ∂_adv_naive = [naive_advection_at_top(file_data, drifter[section[i]].x, drifter[section[i]].y, section[i]) for i in eachindex(iterations)]
   #Œ∂_h_adv = [grid_interpolate(file_data, "Œ∂_h_adv", drifter[section[i]].x, drifter[section[i]].y, iterations[i]) for i in eachindex(iterations)]
    #Œ∂_v_adv = Œ∂_adv - Œ∂_h_adv
    Œ∂_visc = [grid_interpolate(file_data, "Œ∂_visc", drifter[section[i]].x, drifter[section[i]].y, iterations[i]) for i in eachindex(iterations)]
    Œ∂_err = [grid_interpolate(file_data, "Œ∂_err", drifter[section[i]].x, drifter[section[i]].y, iterations[i]) for i in eachindex(iterations)]
    Œ∂_cor = [grid_interpolate(file_data, "Œ∂_cor", drifter[section[i]].x, drifter[section[i]].y, iterations[i]) for i in eachindex(iterations)]
    Œ∂ = [grid_interpolate(file_data, "Œ∂", drifter[section[i]].x, drifter[section[i]].y, iterations[i]) for i in eachindex(iterations)]

    t = smooth_timeseries(t)
    F_Œ∂_hor = smooth_timeseries(F_Œ∂_hor)
    F_Œ∂_vrt = smooth_timeseries(F_Œ∂_vrt)
    Œ∂_tendency = smooth_timeseries(Œ∂_tendency)
    Œ∂_adv = smooth_timeseries(Œ∂_adv)
    Œ∂_adv_naive
    #Œ∂_h_adv = smooth_timeseries(Œ∂_h_adv)
    #Œ∂_v_adv = Œ∂_adv - Œ∂_h_adv
    Œ∂_visc = smooth_timeseries(Œ∂_visc)
    Œ∂_err = smooth_timeseries(Œ∂_err)
    Œ∂_cor = smooth_timeseries(Œ∂_cor)
    Œ∂ = smooth_timeseries(Œ∂)
    D‚ÇúŒ∂ = [(i == 1 || i == length(Œ∂)) ? 0 : (Œ∂[i+1] - Œ∂[i-1]) / (2(t[i+1]-t[i-1])) for i in 1:length(Œ∂)]


    fig = Figure()
    ax = Axis(fig[1, 1])
    lines!(ax, f*t, Œ∂_tendency + Œ∂_adv)# + Œ∂_err)
    lines!(ax, f*t, Œ∂_tendency + Œ∂_adv_naive)# + Œ∂_err)
    lines!(ax, f*t, F_Œ∂_hor + F_Œ∂_vrt + Œ∂_cor + Œ∂_visc - Œ∂_err)# - Œ∂_v_adv)
    lines!(ax, f*t, F_Œ∂_hor, linestyle = :dash, label = "F_Œ∂_hor")
    lines!(ax, f*t, F_Œ∂_vrt, linestyle = :dash, label = "F_Œ∂_vrt")
    lines!(ax, f*t, Œ∂_cor, linestyle = :dash, label = "Œ∂_cor")
    lines!(ax, f*t, Œ∂_visc, linestyle = :dash, label = "Œ∂_visc")
    # lines!(ax, f*t, Œ∂_adv, linestyle = :dash, label = "Œ∂_adv")
    lines!(ax, f*t, -Œ∂_err, linestyle = :dash, label = "Œ∂_err", color = :black)
    #lines!(ax, f*t, -Œ∂_v_adv, linestyle = :dash, label = "Œ∂_v_adv")
    lines!(ax, f*t, f*Œ∂, linestyle = :dot, label = L"\zeta f")
    lines!(ax, f*t, D‚ÇúŒ∂, label = L"D\zeta/Dt")
    #xlims!(ax, xlim‚ÇÅ, xlim‚ÇÇ)
    axislegend(position = legendPos)
    display(fig)

    Œ∂_calc = (Œ∂[2]+Œ∂[1])/2 .+ (t[2]-t[1]) * [sum((Œ∂_tendency + Œ∂_adv)[1:i]) for i in 1:length(Œ∂_tendency)]
    fig = Figure()
    ax = Axis(fig[1, 1])
    lines!(f*t, Œ∂)
    lines!(ax, f*t, Œ∂_calc)
    display(fig)

    #=
    D‚ÇúŒ∂_direct = (Œ∂[2:end] - Œ∂[1:end-1]) ./ (t[2:end] - t[1:end-1])
    ft_tween = f * (t[2:end] + t[1:end-1]) / 2
    D‚ÇúŒ∂_calc = Œ∂_tendency + Œ∂_adv + Œ∂_err
    D‚ÇúŒ∂_calc = (D‚ÇúŒ∂_calc[2:end] + D‚ÇúŒ∂_calc[1:end-1]) / 2
    fig = Figure()
    ax = Axis(fig[1, 1])
    lines!(ax, ft_tween, D‚ÇúŒ∂_calc)
    lines!(ax, ft_tween, D‚ÇúŒ∂_direct)
    display(fig)=#

end

function Œ∂_Œ¥(drifter, section)
    s = section
    Œît = t[s[2]] - t[s[1]]
    ft = f * t[s]
    D‚ÇúŒ∂ = [(drifter[i+1].Œ∂ - drifter[i-1].Œ∂) / (2Œît) for i in s]*other_mult
    fig = Figure()
    ax = Axis(fig[1, 1])
    #ylims!(ax, (-2e-7, 2e-7))
    Œ∂ = Œ∂_on_f.(drifter[s])
    Œ¥ = Œ¥_on_f.(drifter[s])
    Œ∂_g = -F_prs_Œ¥.(drifter[s])/f
    if length(ft) > 5
        ft = ft[3:end-2]
        Œ∂ = smooth_timeseries(Œ∂)
        Œ¥ = smooth_timeseries(Œ¥)
        Œ∂_g = smooth_timeseries(Œ∂_g)
    end
    lines!(ax, ft, Œ∂, label = "zeta")
    lines!(ax, ft, Œ¥, label = "delta")
    lines!(ax, ft, 1000Œ∂_g, label = "zeta_g")
    axislegend()
    display(fig)
end

#=function investigate(drifter)

    ft = f*t
    fig = Figure()
    ax = Axis(fig[1, 1], limits = ((10, 30), (-0.0005, 0.0005)))
    Œ¥_app = [d.Œ¥ for d in drifter]
    Œ∂_zz_app = [d.Œ∂_zz for d in drifter]
    Œ∂ = [d.Œ∂ for d in drifter]
    Œ∂_zz_true = 2*(Œ∂_zz_app+0.5*Œ∂/Œîz^2)
    x = [d.y for d in drifter]

    # now for the interpolation bit

    data = topdata(label)
    drifter = extract_tracers(label)[1]
    new_t, new_Œ¥ = lagr_track_new(label, data, "Œ¥", drifter)

    lines!(ax, ft, Œ¥_app)
    lines!(ax, f*new_t, 0.5*new_Œ¥)
    display(fig)

end=#

function plot_Œ¥_balance(drifter, section)       # needs fixing!!!! iterations and t don't line up
    s = section
    Œît = t[s[2]] - t[s[1]]
    ft = f * t[s]
    D‚ÇúŒ¥ = [(drifter[i+1].Œ¥ - drifter[i-1].Œ¥) / (2Œît) for i in s]*Œ¥_mult
    fig = Figure()
    ax = Axis(fig[1, 1])
    F_hor = F_hor_Œ¥.(drifter[s])*Œ¥_mult^2
    F_Cor = F_Cor_Œ¥.(drifter[s])*other_mult
    F_prs = F_prs_Œ¥.(drifter[s])*other_mult
    H_mix = H_mix_Œ¥.(drifter[s])*Œ¥_mult
    V_mix = V_mix_Œ¥.(drifter[s])*Œ¥_mult
    if length(ft) > 5
        ft = ft[3:end-2]
        D‚ÇúŒ¥ = smooth_timeseries(D‚ÇúŒ¥)
        F_hor = smooth_timeseries(F_hor)
        F_Cor = smooth_timeseries(F_Cor)
        F_prs = smooth_timeseries(F_prs)
        H_mix = smooth_timeseries(H_mix)
        V_mix = smooth_timeseries(V_mix)
    end
    lines!(ax, ft, F_hor, label = "horizontal")
    lines!(ax, ft, F_Cor, label = "Coriolis")
    lines!(ax, ft, F_prs, label = "pressure")
    lines!(ax, ft, H_mix, label = "hor. mixing")
    lines!(ax, ft, V_mix, label = "vert. mixing")
    lines!(ax, ft, D‚ÇúŒ¥ - (F_hor + F_Cor + H_mix + V_mix + F_prs), label = "discrepancy", color = :black, linestyle = :dot)
    lines!(ax, ft, D‚ÇúŒ¥, label = L"D\delta/Dt", color = :black)
    axislegend(position = :lb)
    display(fig)
end

function animate_drifter_balance(drifter, section)

    fig = Figure(size = (950, 950))
    frame = Observable(1)

    if length(section) < 5
        return
    end
    s = section
    Œît = t[s[2]] - t[s[1]]
    ft = f * t[s]
    D‚ÇúŒ∂ = [(drifter[i+1].Œ∂ - drifter[i-1].Œ∂) / (2Œît) for i in s]*other_mult
    D‚ÇúŒ¥ = [(drifter[i+1].Œ¥ - drifter[i-1].Œ¥) / (2Œît) for i in s]*Œ¥_mult
    x = [drifter[i].x for i in s]
    y = [drifter[i].y for i in s]
    FŒ∂_hor = F_hor_Œ∂.(drifter[s])*Œ¥_mult*other_mult
    FŒ∂_vrt = 0 * F_hor_Œ∂.(drifter[s])          # Due to no-penetration condition
    FŒ∂_Cor = F_Cor_Œ∂.(drifter[s])*Œ¥_mult
    HŒ∂_mix = H_mix_Œ∂.(drifter[s])*other_mult
    VŒ∂_mix = V_mix_Œ∂.(drifter[s])*other_mult
    FŒ¥_hor = F_hor_Œ¥.(drifter[s])*Œ¥_mult^2
    FŒ¥_Cor = F_Cor_Œ¥.(drifter[s])*other_mult
    FŒ¥_prs = F_prs_Œ¥.(drifter[s])*other_mult
    HŒ¥_mix = H_mix_Œ¥.(drifter[s])*Œ¥_mult
    VŒ¥_mix = V_mix_Œ¥.(drifter[s])*Œ¥_mult

    s = s[3:end-2]
    ft = ft[3:end-2]
    D‚ÇúŒ∂ = smooth_timeseries(D‚ÇúŒ∂)
    D‚ÇúŒ¥ = smooth_timeseries(D‚ÇúŒ¥)
    x = smooth_timeseries(x)
    y = smooth_timeseries(y)
    FŒ∂_hor = smooth_timeseries(FŒ∂_hor)
    FŒ∂_Cor = smooth_timeseries(FŒ∂_Cor)
    HŒ∂_mix = smooth_timeseries(HŒ∂_mix)
    VŒ∂_mix = smooth_timeseries(VŒ∂_mix)
    FŒ¥_hor = smooth_timeseries(FŒ¥_hor)
    FŒ¥_Cor = smooth_timeseries(FŒ¥_Cor)
    FŒ¥_prs = smooth_timeseries(FŒ¥_prs)
    HŒ¥_mix = smooth_timeseries(HŒ¥_mix)
    VŒ¥_mix = smooth_timeseries(VŒ¥_mix)

    ft_obs = lift(i -> ft[i], frame)
    x_obs = lift(i -> x[i], frame)
    y_obs = lift(i -> y[i], frame)

    fig = Figure()
    ax_Œ∂ = Axis(fig[2, 1:3], height = 200)
    lines!(ax_Œ∂, ft, FŒ∂_hor, label = "horizontal")
    lines!(ax_Œ∂, ft, FŒ∂_Cor, label = "Coriolis")
    lines!(ax_Œ∂, ft, HŒ∂_mix, label = "hor. mixing")
    lines!(ax_Œ∂, ft, VŒ∂_mix, label = "vert. mixing")
    lines!(ax_Œ∂, ft, D‚ÇúŒ∂ - (FŒ∂_hor + FŒ∂_Cor + HŒ∂_mix + VŒ∂_mix), label = "discrepancy", color = :black, linestyle = :dot)
    lines!(ax_Œ∂, ft, D‚ÇúŒ∂, label = L"D\zeta/Dt", color = :black)
    vlines!(ax_Œ∂, ft_obs, color = :black)
    axislegend()

    ax_Œ¥ = Axis(fig[3, 1:3], height = 200)
    lines!(ax_Œ¥, ft, FŒ¥_hor, label = "horizontal")
    lines!(ax_Œ¥, ft, FŒ¥_Cor, label = "Coriolis")
    lines!(ax_Œ¥, ft, FŒ¥_prs, label = "pressure")
    lines!(ax_Œ¥, ft, HŒ¥_mix, label = "hor. mixing")
    lines!(ax_Œ¥, ft, VŒ¥_mix, label = "vert. mixing")
    lines!(ax_Œ¥, ft, D‚ÇúŒ¥ - (FŒ¥_hor + FŒ¥_Cor + HŒ¥_mix + VŒ¥_mix + FŒ¥_prs), label = "discrepancy", color = :black, linestyle = :dot)
    lines!(ax_Œ¥, ft, D‚ÇúŒ¥, label = L"D\delta/Dt", color = :black)
    vlines!(ax_Œ¥, ft_obs, color = :black)
    axislegend(position = :lb)

    display(fig)




    filename_xy_top = "raw_data/" * label * "_BI_xy" * ".jld2"

    # Read in the first iteration. We do this to load the grid
    b_ic = FieldTimeSeries(filename_xy_top, "b", iterations = 0)
    Œ∂_ic = FieldTimeSeries(filename_xy_top, "Œ∂", iterations = 0)

    # Load in co-ordinate arrays
    # We do this separately for each variable since Oceananigans uses a staggered grid
    xb, yb, ~ = nodes(b_ic)
    xŒ∂, yŒ∂, ~ = nodes(Œ∂_ic)

    # Now, open the file with our data
    file = jldopen(filename_xy_top)
    # Extract the values that iter can take
    iterations = parse.(Int, keys(file["timeseries/t"]))

    # Set up observables for plotting that will update as the iteration number is updated
    iter = lift(i -> iterations[s[i]], frame)   # Timestep iteration
    Œ∂_xy = lift(iter -> file["timeseries/Œ∂/$iter"][:, :, 1], iter) # Surface vertical vorticity at this iteration
    Œ∂_on_f = lift(iter -> Œ∂_xy[]/f, iter)
    Œ¥ = lift(iter -> file["timeseries/Œ¥/$iter"][:, :, 1], iter)
    Œ¥_on_f = lift(iter -> file["timeseries/Œ¥/$iter"][:, :, 1]/f, iter)
    b_xy = lift(iter -> file["timeseries/b/$iter"][:, :, 1], iter)   # Surface buoyancy at this iteration

    # Calculate the maximum relative vorticity and buoyancy flux to set the scale for the colourmap
    Œ∂_max = 0
    b_max = maximum(b_ic)

    for i = Int(round(length(iterations)/10)) : length(iterations)
        iter[] = iterations[i]
        Œ∂_max = maximum([Œ∂_max, maximum(Œ∂_xy[])])
    end

    Œ∂_max = minimum([Œ∂_max, 20f])

    @info "Drawing first frame"

    # Create the plot, starting at t = 0
    # This will be updated as the observable iter is updated
    iter[] = 0
    ax_b = Axis(fig[1, 1][1, 1], xlabel = L"$x/\mathrm{km}$", ylabel = L"$y/\mathrm{km}$", title = L"\text{Buoyancy, }b", width = 200, height = 200)
    ax_Œ∂ = Axis(fig[1, 2][1, 1], xlabel = L"$x/\mathrm{km}$", title = L"\text{Vertical vorticity, }\zeta/f", width = 200, height = 200)
    ax_Œ¥ = Axis(fig[1, 3][1, 1], xlabel = L"$x/\mathrm{km}$", title = L"\text{Horizontal divergence, }\delta/f", width = 200, height = 200)
    hm_b = heatmap!(ax_b, xb/1kilometer, yb/1kilometer, b_xy; colorrange = (-0.5*b_max, 1.5*b_max));
    #scatter!(ax_b, x_obs, y_obs, marker = '.', markersize = 30, color = :black)
    hm_Œ∂ = heatmap!(ax_Œ∂, xŒ∂/1kilometer, yŒ∂/1kilometer, Œ∂_on_f; colormap = :coolwarm, colorrange = (-Œ∂_max/f, Œ∂_max/f));
    #scatter!(ax_Œ∂, x_obs, y_obs, marker = '.', markersize = 30, color = :black, update_limits = false)
    hm_Œ¥ = heatmap!(ax_Œ¥, xŒ∂/1kilometer, yŒ∂/1kilometer, Œ¥_on_f; colormap = :coolwarm, colorrange = (-Œ∂_max/f, Œ∂_max/f));
    #scatter!(ax_Œ¥, x_obs, y_obs, marker = '.', markersize = 30, color = :black)
    Colorbar(fig[1, 1][1, 2], hm_b, height = 200)
    Colorbar(fig[1, 2][1, 2], hm_Œ∂, height = 200)
    Colorbar(fig[1, 3][1, 2], hm_Œ¥, height = 200)
    resize_to_layout!(fig)



    display(fig)

    @info "Making an animation from saved data..."
    CairoMakie.record(i -> frame[] = i,
        fig,
        "pretty_things/" * label * ".mp4",
        1 : length(s),
        framerate = 20)

end

function ani_drifters(label::String)
    t_drifters, drifters = get_drifter_data(label)
    ani_drifters(label, drifters[1], 2 : length(t_drifters)-1)
end

function ani_drifters(label::String, drifter, section)     # Animate drifters at the surface over a Œ∂ video
    
    fig = Figure(size = (950, 950))

    s = section
    Œît = t[s[2]] - t[s[1]]
    data = topdata(label)
    iterations = parse.(Int, keys(data.file["timeseries/t"]))
    tracers = extract_tracers(label)
    t_drifters, ~ = get_drifter_data(label)
    ft = f * t_drifters
    first_iter_index = argmin(abs.([data.file["timeseries/t/$iter"] for iter in iterations] .- t_drifters[s[1]])) + 3
    last_iter_index = argmin(abs.([data.file["timeseries/t/$iter"] for iter in iterations] .- t_drifters[s[end]])) - 3

    frame = Observable(1)
    iter = lift(i -> iterations[i], frame)
    t_obs = lift(iter -> data.file["timeseries/t/$iter"], iter)
    Œ∂_on_f = lift(i -> data.file["timeseries/Œ∂/$i"][:, :, 1]/f, iter)
    Œ¥_on_f = lift(i -> data.file["timeseries/Œ¥/$i"][:, :, 1]/f, iter)
    b = lift(i -> data.file["timeseries/b/$i"][:, :, 1], iter)
    i_drifter = lift(t -> argmin(abs.(t_drifters .- t)), t_obs)
    ft_obs = lift(i -> ft[i], i_drifter)
    tracers_now_x = lift(i -> drifter[i].x/1e3, i_drifter)
    tracers_now_y = lift(i -> drifter[i].y/1e3, i_drifter)

    if length(section) < 5
        return
    end
    s = section
    ft = f * t[s]
    D‚ÇúŒ∂ = [(drifter[i+1].Œ∂ - drifter[i-1].Œ∂) / (t[i+1] - t[i-1]) for i in s]*other_mult
    D‚ÇúŒ¥ = [(drifter[i+1].Œ¥ - drifter[i-1].Œ¥) / (t[i+1] - t[i-1]) for i in s]*Œ¥_mult
    x = [drifter[i].x for i in s]
    y = [drifter[i].y for i in s]
    FŒ∂_hor = F_hor_Œ∂.(drifter[s])*Œ¥_mult*other_mult
    FŒ∂_vrt = F_vrt_Œ∂.(drifter[s])*Œ¥_mult*other_mult
    FŒ∂_Cor = F_Cor_Œ∂.(drifter[s])*Œ¥_mult
    HŒ∂_mix = H_mix_Œ∂.(drifter[s])*other_mult
    VŒ∂_mix = V_mix_Œ∂.(drifter[s])*other_mult
    # new ‚Üì
    Œ∂_err = Œ∂_err_func.(drifter[s])
    Œ∂_adv = Œ∂_adv_func.(drifter[s])
    Œ∂_tendency = Œ∂_tendency_func.(drifter[s])
    Œ∂_visc = Œ∂_visc_func.(drifter[s])
    # new ‚Üë
    Œ∂_vert_adv = vert_adv_Œ∂.(drifter[s])
    FŒ¥_hor = F_hor_Œ¥.(drifter[s])*Œ¥_mult^2
    FŒ¥_Cor = F_Cor_Œ¥.(drifter[s])*other_mult
    FŒ¥_prs = F_prs_Œ¥.(drifter[s])*other_mult
    HŒ¥_mix = H_mix_Œ¥.(drifter[s])*Œ¥_mult
    VŒ¥_mix = V_mix_Œ¥.(drifter[s])*Œ¥_mult

    s = s[3:end-2]
    ft = ft[3:end-2]
    D‚ÇúŒ∂ = smooth_timeseries(D‚ÇúŒ∂)
    D‚ÇúŒ¥ = smooth_timeseries(D‚ÇúŒ¥)
    x = smooth_timeseries(x)
    y = smooth_timeseries(y)
    FŒ∂_hor = smooth_timeseries(FŒ∂_hor)
    FŒ∂_vrt = smooth_timeseries(FŒ∂_vrt)
    FŒ∂_Cor = smooth_timeseries(FŒ∂_Cor)
    HŒ∂_mix = smooth_timeseries(HŒ∂_mix)
    VŒ∂_mix = smooth_timeseries(VŒ∂_mix)
    Œ∂_vert_adv = smooth_timeseries(Œ∂_vert_adv)
    # new ‚Üì
    Œ∂_err = smooth_timeseries(Œ∂_err)
    Œ∂_adv = smooth_timeseries(Œ∂_adv)
    Œ∂_tendency = smooth_timeseries(Œ∂_tendency)
    Œ∂_visc = smooth_timeseries(Œ∂_visc)
    # new ‚Üë
    FŒ¥_hor = smooth_timeseries(FŒ¥_hor)
    FŒ¥_Cor = smooth_timeseries(FŒ¥_Cor)
    FŒ¥_prs = smooth_timeseries(FŒ¥_prs)
    HŒ¥_mix = smooth_timeseries(HŒ¥_mix)
    VŒ¥_mix = smooth_timeseries(VŒ¥_mix)

    ax_Œ∂ = Axis(fig[2, 1:3], height = 200)
    #=lines!(ax_Œ∂, ft, FŒ∂_hor, label = "horizontal")
    lines!(ax_Œ∂, ft, FŒ∂_vrt, label = "vertical")
    lines!(ax_Œ∂, ft, FŒ∂_Cor, label = "Coriolis")
    lines!(ax_Œ∂, ft, HŒ∂_mix, label = "mixing")
    lines!(ax_Œ∂, ft, Œ∂_err, label = "error")
    lines!(ax_Œ∂, ft, Œ∂_vert_adv, label = "vert. adv.")=#
    # lines!(ax_Œ∂, ft, D‚ÇúŒ∂ - (FŒ∂_hor + FŒ∂_vrt + FŒ∂_Cor + HŒ∂_mix + VŒ∂_mix + Œ∂_vert_adv), label = "discrepancy", color = :black, linestyle = :dot)
    # lines!(ax_Œ∂, ft, D‚ÇúŒ∂ - (FŒ∂_hor + FŒ∂_vrt + FŒ∂_Cor + HŒ∂_mix + VŒ∂_mix + Œ∂_vert_adv + Œ∂_err), label = "discrepancy", color = :black, linestyle = :dot)
    lines!(ax_Œ∂, ft, Œ∂_tendency + Œ∂_adv - (FŒ∂_hor + FŒ∂_vrt + FŒ∂_Cor + HŒ∂_mix + VŒ∂_mix + Œ∂_vert_adv - Œ∂_err), label = "discrepancy", color = :black, linestyle = :dot)
    lines!(ax_Œ∂, ft, Œ∂_tendency, label = L"\partial\zeta/\partial t")
    lines!(ax_Œ∂, ft, -Œ∂_adv - Œ∂_err + FŒ∂_hor + FŒ∂_vrt + Œ∂_visc + FŒ∂_Cor, label = "Œ∂_tendency (mine)")
    # lines!(ax_Œ∂, ft, D‚ÇúŒ∂, label = L"D\zeta/Dt", color = :black)
    lines!(ax_Œ∂, ft, Œ∂_tendency + Œ∂_adv, label = L"D\zeta/Dt (mine)", color = :black)
    vlines!(ax_Œ∂, ft_obs, color = :black)
    axislegend(position = :lb)
    # DELTA STUFF HAS NOT BEEN UPDATED
    ax_Œ¥ = Axis(fig[3, 1:3], height = 200)
    lines!(ax_Œ¥, ft, FŒ¥_hor, label = "horizontal")
    lines!(ax_Œ¥, ft, FŒ¥_Cor, label = "Coriolis")
    lines!(ax_Œ¥, ft, FŒ¥_prs, label = "pressure")
    lines!(ax_Œ¥, ft, HŒ¥_mix, label = "hor. mixing")
    lines!(ax_Œ¥, ft, VŒ¥_mix, label = "vert. mixing")
    lines!(ax_Œ¥, ft, D‚ÇúŒ¥ - (FŒ¥_hor + FŒ¥_Cor + HŒ¥_mix + VŒ¥_mix + FŒ¥_prs), label = "discrepancy", color = :black, linestyle = :dot)
    lines!(ax_Œ¥, ft, D‚ÇúŒ¥, label = L"D\delta/Dt", color = :black)
    vlines!(ax_Œ¥, ft_obs, color = :black)
    axislegend(position = :lb)

    b_ic = data.file["timeseries/b/0"][:, :, 1]
    b_max = maximum(b_ic)

    ax_Œ∂ = Axis(fig[1, 1][1, 1], aspect = 1)
    hm_Œ∂ = heatmap!(ax_Œ∂, data.x/1e3, data.y/1e3, Œ∂_on_f, colormap = :coolwarm, colorrange = (-20, 20), height = 200);
    scatter!(ax_Œ∂, tracers_now_x, tracers_now_y, marker = '.', markersize = 15, color = :black)
    Colorbar(fig[1, 1][1, 2], hm_Œ∂, height = 200)
    ax_Œ¥ = Axis(fig[1, 2][1, 1], aspect = 1)
    hm_Œ¥ = heatmap!(ax_Œ¥, data.x/1e3, data.y/1e3, Œ¥_on_f, colormap = :coolwarm, colorrange = (-20, 20), height = 200);
    scatter!(ax_Œ¥, tracers_now_x, tracers_now_y, marker = '.', markersize = 15, color = :black)
    Colorbar(fig[1, 2][1, 2], hm_Œ¥, height = 200)
    ax_b = Axis(fig[1, 3][1, 1], aspect = 1)
    hm_b = heatmap!(ax_b, data.x/1e3, data.y/1e3, b, colorrange = (-0.5b_max, 1.5b_max), height = 200);
    scatter!(ax_b, tracers_now_x, tracers_now_y, marker = '.', markersize = 15, color = :black)
    Colorbar(fig[1, 3][1, 2], hm_b, height = 200)
    
    resize_to_layout!(fig)
    display(fig)

    CairoMakie.record(i -> frame[] = i, fig, "pretty_things/tracer_" * label * ".mp4", first_iter_index : last_iter_index, framerate = 20)
    
end

#Œ∂_Œ¥_arrow_map(drifters)
#ani_drifters("nu1e2", drifters[24], 2:100)